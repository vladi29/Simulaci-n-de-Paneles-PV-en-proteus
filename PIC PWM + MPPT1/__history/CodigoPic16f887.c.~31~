//Vladimir Alfaro - Universidad Simón Bolívar - 09/08/2020 
// Con este código se pretende diseñar el algoritmo de control MMPT para un microcontrolador PIC16F887
//-----------------------------------------------------------------------------------------------------

#include <16f887.h>
#device ADC = 10     // Conversor Analógico Digital con  10 bits de resolución
#fuses XT, NOWDT, NOPROTECT, NOLVP, PUT, BROWNOUT, INTRC_IO
#use delay(clock=4000000)
#byte PORTA = 5

int Timer2=10, PostCaler=1, V1, V2=140, I1, I2=10, P1, P2, duty=20;// Preescaler;
//Para 25KHz, el valor para modular el DutyCycle será 40 = 100%
float Vm, Im;

void main(){
    
    //Para la PWM de 1Khz es necesario un Timer2=249, cuando la frecuencia del cristal es de 4Mhz,
    //el PostCaler=1 y Preescaler=4, en base a la siguiente fórmula:
    // Timer2 = (Td*fxtal/(4*Preescaler-PostCaler)) - 1
    //Timer2 = 10;                                    //Para este valor del Timer se puede alcanzar una f=25KHz
    //PostCaler = 1;                                  // Sólo puede tomar valores de 1, 4 o 16, igual que el preescaler
    //Preescaler = 4;
    set_tris_a(0b00000011);                           //Configuro los pines RA0 y RA1 como entradas
    setup_timer_2(t2_div_by_4, Timer2, PostCaler);    // Configuración del timer 2
    setup_ccp1(ccp_pwm);                              // Con esto estamos configurando el modo PWM en la salida ccp1
    setup_adc_ports(all_analog);                      // Todos los puertos analÃ³gicos quedarÃ¡n como analÃ³gicos
    setup_adc(adc_clock_internal);                    //Configuramos la velocidad del ADC
    set_pwm1_duty(duty);                              //Se confiugura el dutycycle de la PWM
    
    while(1){
       set_adc_channel(0);          //Selecciono el canal 0 (RA0)
       delay_us(50);                //Retardo de 50 us para leer la data
       V1=read_adc();                //Guardo en bits el voltaje leido por el canal 0
       
       set_adc_channel(1);          //Selecciono el canal 1 (RA1)
       delay_us(50);                //Retardo de 50 us para leer la data
       I1=read_adc();                //Guardo en bits la corriente leida por el canal 1

   /*-----------Algoritmo MPPT----------*/
       P1 = V1*I1;
       P2 = V2*I2;
       
       if(P1 == P2){
         return;
       }
       else{
         if(P1 - P2 > 0){
            if(V1 - V2 > 0){
               //No estoy seguro de que poner aqui
            }
            else{
               //No estoy seguro de que poner aqui
            }
         }
         else{
            if(V1 - V2 > 0){
               //*No estoy seguro de que poner aqui
            }
            else{
               //No estoy seguro de que poner aqui
            }
         }
       }  
      }
}
