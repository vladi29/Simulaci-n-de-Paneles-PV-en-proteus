CCS PCM C Compiler, Version 5.095d, 1               13-Aug-20 17:54
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Usuario\OneDrive\Escritorio\USB\Verano 2020\Electiva de Electronica de Potencia\Proyecto 2\Simulaci-n-de-Paneles-PV-en-proteus\PIC MPPT 2\PICMPPT2.lst

               ROM used:   1572 words (19%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           48 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   425
0003:  NOP
.................... #INCLUDE <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 0C,00
0005:  DATA 45,36
0006:  DATA 20,22
0007:  DATA 75,3A
0008:  DATA 79,10
0009:  DATA C3,3C
000A:  DATA 63,36
000B:  DATA 65,10
000C:  DATA E5,39
000D:  DATA 3A,00
000E:  DATA 44,10
000F:  DATA 3D,10
0010:  DATA A5,34
0011:  DATA 00,00
0012:  DATA 0C,00
*
00F6:  MOVF   0B,W
00F7:  MOVWF  3B
00F8:  BCF    0B.7
00F9:  BSF    03.5
00FA:  BSF    03.6
00FB:  BSF    0C.7
00FC:  BSF    0C.0
00FD:  NOP
00FE:  NOP
00FF:  BCF    03.5
0100:  BCF    03.6
0101:  BTFSC  3B.7
0102:  BSF    0B.7
0103:  BSF    03.6
0104:  MOVF   0C,W
0105:  ANDLW  7F
0106:  BTFSC  03.2
0107:  GOTO   14A
0108:  BCF    03.6
0109:  MOVWF  3B
010A:  BSF    03.6
010B:  MOVF   0D,W
010C:  BCF    03.6
010D:  MOVWF  3C
010E:  BSF    03.6
010F:  MOVF   0F,W
0110:  BCF    03.6
0111:  MOVWF  3D
0112:  MOVF   3B,W
0113:  MOVWF  41
0114:  CALL   0CA
0115:  MOVF   3C,W
0116:  BSF    03.6
0117:  MOVWF  0D
0118:  BCF    03.6
0119:  MOVF   3D,W
011A:  BSF    03.6
011B:  MOVWF  0F
011C:  BCF    03.6
011D:  MOVF   0B,W
011E:  MOVWF  3E
011F:  BCF    0B.7
0120:  BSF    03.5
0121:  BSF    03.6
0122:  BSF    0C.7
0123:  BSF    0C.0
0124:  NOP
0125:  NOP
0126:  BCF    03.5
0127:  BCF    03.6
0128:  BTFSC  3E.7
0129:  BSF    0B.7
012A:  BSF    03.6
012B:  RLF    0C,W
012C:  RLF    0E,W
012D:  ANDLW  7F
012E:  BTFSC  03.2
012F:  GOTO   14A
0130:  BCF    03.6
0131:  MOVWF  3B
0132:  BSF    03.6
0133:  MOVF   0D,W
0134:  BCF    03.6
0135:  MOVWF  3C
0136:  BSF    03.6
0137:  MOVF   0F,W
0138:  BCF    03.6
0139:  MOVWF  3D
013A:  MOVF   3B,W
013B:  MOVWF  41
013C:  CALL   0CA
013D:  MOVF   3C,W
013E:  BSF    03.6
013F:  MOVWF  0D
0140:  BCF    03.6
0141:  MOVF   3D,W
0142:  BSF    03.6
0143:  MOVWF  0F
0144:  INCF   0D,F
0145:  BTFSC  03.2
0146:  INCF   0F,F
0147:  BCF    03.6
0148:  GOTO   0F6
0149:  BSF    03.6
014A:  BCF    03.6
014B:  RETURN
014C:  MOVLW  8E
014D:  MOVWF  77
014E:  MOVF   3C,W
014F:  MOVWF  78
0150:  MOVF   3B,W
0151:  MOVWF  79
0152:  CLRF   7A
0153:  MOVF   78,F
0154:  BTFSS  03.2
0155:  GOTO   160
0156:  MOVF   79,W
0157:  MOVWF  78
0158:  CLRF   79
0159:  MOVLW  08
015A:  SUBWF  77,F
015B:  MOVF   78,F
015C:  BTFSS  03.2
015D:  GOTO   160
015E:  CLRF   77
015F:  GOTO   168
0160:  BCF    03.0
0161:  BTFSC  78.7
0162:  GOTO   167
0163:  RLF    79,F
0164:  RLF    78,F
0165:  DECF   77,F
0166:  GOTO   160
0167:  BCF    78.7
0168:  RETURN
0169:  MOVF   3B,W
016A:  BTFSC  03.2
016B:  GOTO   1D9
016C:  MOVWF  43
016D:  MOVF   3F,W
016E:  BTFSC  03.2
016F:  GOTO   1D9
0170:  ADDWF  43,F
0171:  BTFSC  03.0
0172:  GOTO   17A
0173:  MOVLW  7F
0174:  SUBWF  43,F
0175:  BTFSS  03.0
0176:  GOTO   1D9
0177:  BTFSC  03.2
0178:  GOTO   1D9
0179:  GOTO   17E
017A:  MOVLW  81
017B:  ADDWF  43,F
017C:  BTFSC  03.0
017D:  GOTO   1D9
017E:  MOVF   43,W
017F:  MOVWF  77
0180:  CLRF   78
0181:  CLRF   79
0182:  CLRF   7A
0183:  MOVF   3C,W
0184:  MOVWF  47
0185:  BSF    47.7
0186:  MOVF   3D,W
0187:  MOVWF  46
0188:  MOVF   3E,W
0189:  MOVWF  45
018A:  MOVLW  18
018B:  MOVWF  43
018C:  CLRF   44
018D:  BTFSS  45.0
018E:  GOTO   1A7
018F:  MOVF   42,W
0190:  ADDWF  7A,F
0191:  BTFSS  03.0
0192:  GOTO   199
0193:  INCF   79,F
0194:  BTFSS  03.2
0195:  GOTO   199
0196:  INCF   78,F
0197:  BTFSC  03.2
0198:  BSF    44.7
0199:  MOVF   41,W
019A:  ADDWF  79,F
019B:  BTFSS  03.0
019C:  GOTO   1A0
019D:  INCF   78,F
019E:  BTFSC  03.2
019F:  BSF    44.7
01A0:  MOVF   40,W
01A1:  MOVWF  3D
01A2:  BSF    3D.7
01A3:  MOVF   3D,W
01A4:  ADDWF  78,F
01A5:  BTFSC  03.0
01A6:  BSF    44.7
01A7:  RLF    44,F
01A8:  RRF    78,F
01A9:  RRF    79,F
01AA:  RRF    7A,F
01AB:  RRF    47,F
01AC:  RRF    46,F
01AD:  RRF    45,F
01AE:  BCF    03.0
01AF:  DECFSZ 43,F
01B0:  GOTO   18C
01B1:  MOVLW  01
01B2:  ADDWF  77,F
01B3:  BTFSC  03.0
01B4:  GOTO   1D9
01B5:  BTFSC  78.7
01B6:  GOTO   1BE
01B7:  RLF    47,F
01B8:  RLF    7A,F
01B9:  RLF    79,F
01BA:  RLF    78,F
01BB:  DECF   77,F
01BC:  BTFSC  03.2
01BD:  GOTO   1D9
01BE:  BTFSS  47.7
01BF:  GOTO   1CF
01C0:  INCF   7A,F
01C1:  BTFSS  03.2
01C2:  GOTO   1CF
01C3:  INCF   79,F
01C4:  BTFSS  03.2
01C5:  GOTO   1CF
01C6:  INCF   78,F
01C7:  BTFSS  03.2
01C8:  GOTO   1CF
01C9:  RRF    78,F
01CA:  RRF    79,F
01CB:  RRF    7A,F
01CC:  INCF   77,F
01CD:  BTFSC  03.2
01CE:  GOTO   1D9
01CF:  MOVF   3C,W
01D0:  MOVWF  44
01D1:  MOVF   40,W
01D2:  XORWF  44,F
01D3:  BTFSS  44.7
01D4:  GOTO   1D7
01D5:  BSF    78.7
01D6:  GOTO   1DD
01D7:  BCF    78.7
01D8:  GOTO   1DD
01D9:  CLRF   77
01DA:  CLRF   78
01DB:  CLRF   79
01DC:  CLRF   7A
01DD:  RETURN
01DE:  MOVLW  80
01DF:  BTFSC  03.1
01E0:  XORWF  40,F
01E1:  CLRF   45
01E2:  CLRF   46
01E3:  MOVF   3C,W
01E4:  MOVWF  44
01E5:  MOVF   40,W
01E6:  XORWF  44,F
01E7:  MOVF   3B,W
01E8:  BTFSC  03.2
01E9:  GOTO   2CE
01EA:  MOVWF  43
01EB:  MOVWF  77
01EC:  MOVF   3F,W
01ED:  BTFSC  03.2
01EE:  GOTO   2D7
01EF:  SUBWF  43,F
01F0:  BTFSC  03.2
01F1:  GOTO   273
01F2:  BTFSS  03.0
01F3:  GOTO   231
01F4:  MOVF   40,W
01F5:  MOVWF  49
01F6:  BSF    49.7
01F7:  MOVF   41,W
01F8:  MOVWF  48
01F9:  MOVF   42,W
01FA:  MOVWF  47
01FB:  CLRF   46
01FC:  BCF    03.0
01FD:  RRF    49,F
01FE:  RRF    48,F
01FF:  RRF    47,F
0200:  RRF    46,F
0201:  DECFSZ 43,F
0202:  GOTO   1FB
0203:  BTFSS  44.7
0204:  GOTO   208
0205:  BSF    45.0
0206:  GOTO   2EB
0207:  BCF    45.0
0208:  BCF    43.0
0209:  BSF    45.4
020A:  MOVLW  3E
020B:  MOVWF  04
020C:  BCF    03.7
020D:  GOTO   300
020E:  BCF    45.4
020F:  BTFSC  44.7
0210:  GOTO   21B
0211:  BTFSS  43.0
0212:  GOTO   226
0213:  RRF    49,F
0214:  RRF    48,F
0215:  RRF    47,F
0216:  RRF    46,F
0217:  INCF   77,F
0218:  BTFSC  03.2
0219:  GOTO   2E6
021A:  GOTO   226
021B:  BTFSC  49.7
021C:  GOTO   229
021D:  BCF    03.0
021E:  RLF    46,F
021F:  RLF    47,F
0220:  RLF    48,F
0221:  RLF    49,F
0222:  DECF   77,F
0223:  BTFSC  03.2
0224:  GOTO   2E6
0225:  GOTO   21B
0226:  BSF    45.6
0227:  GOTO   293
0228:  BCF    45.6
0229:  MOVF   3C,W
022A:  MOVWF  44
022B:  BTFSS  44.7
022C:  GOTO   22F
022D:  BSF    49.7
022E:  GOTO   2DF
022F:  BCF    49.7
0230:  GOTO   2DF
0231:  MOVF   3F,W
0232:  MOVWF  43
0233:  MOVWF  77
0234:  MOVF   3B,W
0235:  SUBWF  43,F
0236:  MOVF   3C,W
0237:  MOVWF  49
0238:  BSF    49.7
0239:  MOVF   3D,W
023A:  MOVWF  48
023B:  MOVF   3E,W
023C:  MOVWF  47
023D:  CLRF   46
023E:  BCF    03.0
023F:  RRF    49,F
0240:  RRF    48,F
0241:  RRF    47,F
0242:  RRF    46,F
0243:  DECFSZ 43,F
0244:  GOTO   23D
0245:  BTFSS  44.7
0246:  GOTO   24A
0247:  BSF    45.1
0248:  GOTO   2EB
0249:  BCF    45.1
024A:  BCF    43.0
024B:  BSF    45.5
024C:  MOVLW  42
024D:  MOVWF  04
024E:  BCF    03.7
024F:  GOTO   300
0250:  BCF    45.5
0251:  BTFSC  44.7
0252:  GOTO   25D
0253:  BTFSS  43.0
0254:  GOTO   268
0255:  RRF    49,F
0256:  RRF    48,F
0257:  RRF    47,F
0258:  RRF    46,F
0259:  INCF   77,F
025A:  BTFSC  03.2
025B:  GOTO   2E6
025C:  GOTO   268
025D:  BTFSC  49.7
025E:  GOTO   26B
025F:  BCF    03.0
0260:  RLF    46,F
0261:  RLF    47,F
0262:  RLF    48,F
0263:  RLF    49,F
0264:  DECF   77,F
0265:  BTFSC  03.2
0266:  GOTO   2E6
0267:  GOTO   25D
0268:  BSF    45.7
0269:  GOTO   293
026A:  BCF    45.7
026B:  MOVF   40,W
026C:  MOVWF  44
026D:  BTFSS  44.7
026E:  GOTO   271
026F:  BSF    49.7
0270:  GOTO   2DF
0271:  BCF    49.7
0272:  GOTO   2DF
0273:  MOVF   40,W
0274:  MOVWF  49
0275:  BSF    49.7
0276:  MOVF   41,W
0277:  MOVWF  48
0278:  MOVF   42,W
0279:  MOVWF  47
027A:  BTFSS  44.7
027B:  GOTO   280
027C:  BCF    49.7
027D:  BSF    45.2
027E:  GOTO   2EB
027F:  BCF    45.2
0280:  CLRF   46
0281:  BCF    43.0
0282:  MOVLW  3E
0283:  MOVWF  04
0284:  BCF    03.7
0285:  GOTO   300
0286:  BTFSC  44.7
0287:  GOTO   2A9
0288:  MOVF   3C,W
0289:  MOVWF  44
028A:  BTFSS  43.0
028B:  GOTO   293
028C:  RRF    49,F
028D:  RRF    48,F
028E:  RRF    47,F
028F:  RRF    46,F
0290:  INCF   77,F
0291:  BTFSC  03.2
0292:  GOTO   2E6
0293:  BTFSS  46.7
0294:  GOTO   2A4
0295:  INCF   47,F
0296:  BTFSS  03.2
0297:  GOTO   2A4
0298:  INCF   48,F
0299:  BTFSS  03.2
029A:  GOTO   2A4
029B:  INCF   49,F
029C:  BTFSS  03.2
029D:  GOTO   2A4
029E:  RRF    49,F
029F:  RRF    48,F
02A0:  RRF    47,F
02A1:  INCF   77,F
02A2:  BTFSC  03.2
02A3:  GOTO   2E6
02A4:  BTFSC  45.6
02A5:  GOTO   228
02A6:  BTFSC  45.7
02A7:  GOTO   26A
02A8:  GOTO   2C8
02A9:  MOVLW  80
02AA:  XORWF  49,F
02AB:  BTFSS  49.7
02AC:  GOTO   2B1
02AD:  GOTO   2EB
02AE:  MOVF   40,W
02AF:  MOVWF  44
02B0:  GOTO   2BE
02B1:  MOVF   3C,W
02B2:  MOVWF  44
02B3:  MOVF   49,F
02B4:  BTFSS  03.2
02B5:  GOTO   2BE
02B6:  MOVF   48,F
02B7:  BTFSS  03.2
02B8:  GOTO   2BE
02B9:  MOVF   47,F
02BA:  BTFSS  03.2
02BB:  GOTO   2BE
02BC:  CLRF   77
02BD:  GOTO   2DF
02BE:  BTFSC  49.7
02BF:  GOTO   2C8
02C0:  BCF    03.0
02C1:  RLF    46,F
02C2:  RLF    47,F
02C3:  RLF    48,F
02C4:  RLF    49,F
02C5:  DECFSZ 77,F
02C6:  GOTO   2BE
02C7:  GOTO   2E6
02C8:  BTFSS  44.7
02C9:  GOTO   2CC
02CA:  BSF    49.7
02CB:  GOTO   2DF
02CC:  BCF    49.7
02CD:  GOTO   2DF
02CE:  MOVF   3F,W
02CF:  MOVWF  77
02D0:  MOVF   40,W
02D1:  MOVWF  49
02D2:  MOVF   41,W
02D3:  MOVWF  48
02D4:  MOVF   42,W
02D5:  MOVWF  47
02D6:  GOTO   2DF
02D7:  MOVF   3B,W
02D8:  MOVWF  77
02D9:  MOVF   3C,W
02DA:  MOVWF  49
02DB:  MOVF   3D,W
02DC:  MOVWF  48
02DD:  MOVF   3E,W
02DE:  MOVWF  47
02DF:  MOVF   49,W
02E0:  MOVWF  78
02E1:  MOVF   48,W
02E2:  MOVWF  79
02E3:  MOVF   47,W
02E4:  MOVWF  7A
02E5:  GOTO   31E
02E6:  CLRF   77
02E7:  CLRF   78
02E8:  CLRF   79
02E9:  CLRF   7A
02EA:  GOTO   31E
02EB:  CLRF   46
02EC:  COMF   47,F
02ED:  COMF   48,F
02EE:  COMF   49,F
02EF:  COMF   46,F
02F0:  INCF   46,F
02F1:  BTFSS  03.2
02F2:  GOTO   2F9
02F3:  INCF   47,F
02F4:  BTFSS  03.2
02F5:  GOTO   2F9
02F6:  INCF   48,F
02F7:  BTFSC  03.2
02F8:  INCF   49,F
02F9:  BTFSC  45.0
02FA:  GOTO   207
02FB:  BTFSC  45.1
02FC:  GOTO   249
02FD:  BTFSC  45.2
02FE:  GOTO   27F
02FF:  GOTO   2AE
0300:  MOVF   00,W
0301:  ADDWF  47,F
0302:  BTFSS  03.0
0303:  GOTO   30A
0304:  INCF   48,F
0305:  BTFSS  03.2
0306:  GOTO   30A
0307:  INCF   49,F
0308:  BTFSC  03.2
0309:  BSF    43.0
030A:  DECF   04,F
030B:  MOVF   00,W
030C:  ADDWF  48,F
030D:  BTFSS  03.0
030E:  GOTO   312
030F:  INCF   49,F
0310:  BTFSC  03.2
0311:  BSF    43.0
0312:  DECF   04,F
0313:  MOVF   00,W
0314:  BTFSS  00.7
0315:  XORLW  80
0316:  ADDWF  49,F
0317:  BTFSC  03.0
0318:  BSF    43.0
0319:  BTFSC  45.4
031A:  GOTO   20E
031B:  BTFSC  45.5
031C:  GOTO   250
031D:  GOTO   286
031E:  RETURN
031F:  MOVF   40,W
0320:  MOVWF  47
0321:  MOVF   44,W
0322:  XORWF  47,F
0323:  BTFSS  47.7
0324:  GOTO   32A
0325:  BCF    03.2
0326:  BCF    03.0
0327:  BTFSC  40.7
0328:  BSF    03.0
0329:  GOTO   35D
032A:  MOVF   40,W
032B:  MOVWF  47
032C:  MOVF   43,W
032D:  MOVWF  48
032E:  MOVF   3F,W
032F:  SUBWF  48,F
0330:  BTFSC  03.2
0331:  GOTO   338
0332:  BTFSS  47.7
0333:  GOTO   35D
0334:  MOVF   03,W
0335:  XORLW  01
0336:  MOVWF  03
0337:  GOTO   35D
0338:  MOVF   44,W
0339:  MOVWF  48
033A:  MOVF   40,W
033B:  SUBWF  48,F
033C:  BTFSC  03.2
033D:  GOTO   344
033E:  BTFSS  47.7
033F:  GOTO   35D
0340:  MOVF   03,W
0341:  XORLW  01
0342:  MOVWF  03
0343:  GOTO   35D
0344:  MOVF   45,W
0345:  MOVWF  48
0346:  MOVF   41,W
0347:  SUBWF  48,F
0348:  BTFSC  03.2
0349:  GOTO   350
034A:  BTFSS  47.7
034B:  GOTO   35D
034C:  MOVF   03,W
034D:  XORLW  01
034E:  MOVWF  03
034F:  GOTO   35D
0350:  MOVF   46,W
0351:  MOVWF  48
0352:  MOVF   42,W
0353:  SUBWF  48,F
0354:  BTFSC  03.2
0355:  GOTO   35C
0356:  BTFSS  47.7
0357:  GOTO   35D
0358:  MOVF   03,W
0359:  XORLW  01
035A:  MOVWF  03
035B:  GOTO   35D
035C:  BCF    03.0
035D:  RETURN
035E:  MOVF   0B,W
035F:  MOVWF  3C
0360:  BCF    0B.7
0361:  BSF    03.5
0362:  BSF    03.6
0363:  BSF    0C.7
0364:  BSF    0C.0
0365:  NOP
0366:  NOP
0367:  BCF    03.5
0368:  BCF    03.6
0369:  BTFSC  3C.7
036A:  BSF    0B.7
036B:  BTFSC  03.0
036C:  GOTO   395
036D:  BSF    03.6
036E:  MOVF   0C,W
036F:  ANDLW  7F
0370:  BCF    03.6
0371:  MOVWF  3C
0372:  BSF    03.6
0373:  MOVF   0D,W
0374:  BCF    03.6
0375:  MOVWF  3D
0376:  BSF    03.6
0377:  MOVF   0F,W
0378:  BCF    03.6
0379:  MOVWF  3E
037A:  MOVF   3C,W
037B:  MOVWF  41
037C:  CALL   0CA
037D:  MOVF   3D,W
037E:  BSF    03.6
037F:  MOVWF  0D
0380:  BCF    03.6
0381:  MOVF   3E,W
0382:  BSF    03.6
0383:  MOVWF  0F
0384:  BCF    03.6
0385:  MOVF   0B,W
0386:  MOVWF  3F
0387:  BCF    0B.7
0388:  BSF    03.5
0389:  BSF    03.6
038A:  BSF    0C.7
038B:  BSF    0C.0
038C:  NOP
038D:  NOP
038E:  BCF    03.5
038F:  BCF    03.6
0390:  BTFSC  3F.7
0391:  BSF    0B.7
0392:  DECFSZ 3B,F
0393:  GOTO   395
0394:  GOTO   3B4
0395:  BSF    03.6
0396:  RLF    0C,W
0397:  RLF    0E,W
0398:  ANDLW  7F
0399:  BCF    03.6
039A:  MOVWF  3C
039B:  BSF    03.6
039C:  MOVF   0D,W
039D:  BCF    03.6
039E:  MOVWF  3D
039F:  BSF    03.6
03A0:  MOVF   0F,W
03A1:  BCF    03.6
03A2:  MOVWF  3E
03A3:  MOVF   3C,W
03A4:  MOVWF  41
03A5:  CALL   0CA
03A6:  MOVF   3D,W
03A7:  BSF    03.6
03A8:  MOVWF  0D
03A9:  BCF    03.6
03AA:  MOVF   3E,W
03AB:  BSF    03.6
03AC:  MOVWF  0F
03AD:  INCF   0D,F
03AE:  BTFSC  03.2
03AF:  INCF   0F,F
03B0:  BCF    03.0
03B1:  BCF    03.6
03B2:  DECFSZ 3B,F
03B3:  GOTO   35E
03B4:  BCF    0A.3
03B5:  BCF    0A.4
03B6:  GOTO   60F (RETURN)
03B7:  MOVF   42,W
03B8:  CLRF   78
03B9:  SUBWF  41,W
03BA:  BTFSC  03.0
03BB:  GOTO   3BF
03BC:  MOVF   41,W
03BD:  MOVWF  77
03BE:  GOTO   3CB
03BF:  CLRF   77
03C0:  MOVLW  08
03C1:  MOVWF  43
03C2:  RLF    41,F
03C3:  RLF    77,F
03C4:  MOVF   42,W
03C5:  SUBWF  77,W
03C6:  BTFSC  03.0
03C7:  MOVWF  77
03C8:  RLF    78,F
03C9:  DECFSZ 43,F
03CA:  GOTO   3C2
03CB:  RETURN
03CC:  MOVLW  20
03CD:  BTFSS  3C.4
03CE:  MOVLW  30
03CF:  MOVWF  3D
03D0:  MOVF   3B,W
03D1:  MOVWF  77
03D2:  BTFSS  3B.7
03D3:  GOTO   3DC
03D4:  COMF   77,F
03D5:  INCF   77,F
03D6:  MOVF   77,W
03D7:  MOVWF  3B
03D8:  MOVLW  2D
03D9:  MOVWF  3D
03DA:  BSF    3C.7
03DB:  BSF    3C.0
03DC:  MOVF   3B,W
03DD:  MOVWF  41
03DE:  MOVLW  64
03DF:  MOVWF  42
03E0:  CALL   3B7
03E1:  MOVF   77,W
03E2:  MOVWF  3B
03E3:  MOVLW  30
03E4:  ADDWF  78,W
03E5:  MOVWF  3E
03E6:  MOVF   3B,W
03E7:  MOVWF  41
03E8:  MOVLW  0A
03E9:  MOVWF  42
03EA:  CALL   3B7
03EB:  MOVLW  30
03EC:  ADDWF  77,W
03ED:  MOVWF  40
03EE:  MOVLW  30
03EF:  ADDWF  78,W
03F0:  MOVWF  3F
03F1:  MOVF   3D,W
03F2:  MOVWF  77
03F3:  MOVLW  30
03F4:  SUBWF  3E,W
03F5:  BTFSC  03.2
03F6:  GOTO   3FB
03F7:  BSF    3C.1
03F8:  BTFSC  3C.7
03F9:  BSF    3C.2
03FA:  GOTO   40F
03FB:  MOVF   3D,W
03FC:  MOVWF  3E
03FD:  MOVLW  20
03FE:  MOVWF  3D
03FF:  MOVLW  30
0400:  SUBWF  3F,W
0401:  BTFSC  03.2
0402:  GOTO   407
0403:  BSF    3C.0
0404:  BTFSC  3C.7
0405:  BSF    3C.1
0406:  GOTO   40F
0407:  BTFSS  03.2
0408:  BSF    3C.0
0409:  BTFSS  03.2
040A:  GOTO   40F
040B:  MOVF   3E,W
040C:  MOVWF  3F
040D:  MOVLW  20
040E:  MOVWF  3E
040F:  BTFSC  3C.2
0410:  GOTO   416
0411:  BTFSC  3C.1
0412:  GOTO   419
0413:  BTFSC  3C.0
0414:  GOTO   41C
0415:  GOTO   41F
0416:  MOVF   3D,W
0417:  MOVWF  41
0418:  CALL   0CA
0419:  MOVF   3E,W
041A:  MOVWF  41
041B:  CALL   0CA
041C:  MOVF   3F,W
041D:  MOVWF  41
041E:  CALL   0CA
041F:  MOVF   40,W
0420:  MOVWF  41
0421:  CALL   0CA
0422:  BCF    0A.3
0423:  BCF    0A.4
0424:  GOTO   614 (RETURN)
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... //#USE DELAY(CLOCK=4000000) // Reloj interno 4MHz
.................... #use delay(clock=4000000,crystal)//Crystal Externo 4MHz
*
0013:  MOVLW  42
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   027
0019:  MOVLW  01
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  4A
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  GOTO   025
0025:  DECFSZ 00,F
0026:  GOTO   019
0027:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP
.................... #INCLUDE <LCD.C>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0040:  MOVLW  0F
0041:  BSF    03.5
0042:  ANDWF  08,W
0043:  IORLW  F0
0044:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0045:  BCF    03.5
0046:  BSF    08.2
....................    delay_cycles(1);
0047:  NOP
....................    lcd_output_enable(1);
0048:  BSF    08.0
....................    delay_cycles(1);
0049:  NOP
....................    high = lcd_read_nibble();
004A:  CALL   034
004B:  MOVF   78,W
004C:  MOVWF  49
....................       
....................    lcd_output_enable(0);
004D:  BCF    08.0
....................    delay_cycles(1);
004E:  NOP
....................    lcd_output_enable(1);
004F:  BSF    08.0
....................    delay_us(1);
0050:  NOP
....................    low = lcd_read_nibble();
0051:  CALL   034
0052:  MOVF   78,W
0053:  MOVWF  48
....................       
....................    lcd_output_enable(0);
0054:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0055:  MOVLW  0F
0056:  BSF    03.5
0057:  ANDWF  08,W
0058:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0059:  BCF    03.5
005A:  SWAPF  49,W
005B:  MOVWF  77
005C:  MOVLW  F0
005D:  ANDWF  77,F
005E:  MOVF   77,W
005F:  IORWF  48,W
0060:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0034:  MOVF   08,W
0035:  MOVWF  77
0036:  SWAPF  08,W
0037:  ANDLW  0F
0038:  MOVWF  78
....................   #endif
0039:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0028:  SWAPF  49,W
0029:  ANDLW  F0
002A:  MOVWF  77
002B:  MOVLW  0F
002C:  ANDWF  08,W
002D:  IORWF  77,W
002E:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
002F:  NOP
....................    lcd_output_enable(1);
0030:  BSF    08.0
....................    delay_us(2);
0031:  GOTO   032
....................    lcd_output_enable(0);
0032:  BCF    08.0
0033:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
003A:  BSF    03.5
003B:  BCF    08.0
....................    lcd_rs_tris();
003C:  BCF    08.1
....................    lcd_rw_tris();
003D:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
003E:  BCF    03.5
003F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0061:  MOVF   78,W
0062:  MOVWF  48
0063:  BTFSC  48.7
0064:  GOTO   040
....................    lcd_output_rs(address);
0065:  BTFSS  46.0
0066:  BCF    08.1
0067:  BTFSC  46.0
0068:  BSF    08.1
....................    delay_cycles(1);
0069:  NOP
....................    lcd_output_rw(0);
006A:  BCF    08.2
....................    delay_cycles(1);
006B:  NOP
....................    lcd_output_enable(0);
006C:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
006D:  SWAPF  47,W
006E:  MOVWF  48
006F:  MOVLW  0F
0070:  ANDWF  48,F
0071:  MOVF   48,W
0072:  MOVWF  49
0073:  CALL   028
....................    lcd_send_nibble(n & 0xf);
0074:  MOVF   47,W
0075:  ANDLW  0F
0076:  MOVWF  48
0077:  MOVWF  49
0078:  CALL   028
0079:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
007A:  MOVLW  28
007B:  MOVWF  3C
007C:  MOVLW  0C
007D:  MOVWF  3D
007E:  MOVLW  01
007F:  MOVWF  3E
0080:  MOVLW  06
0081:  MOVWF  3F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0082:  BCF    08.0
....................    lcd_output_rs(0);
0083:  BCF    08.1
....................    lcd_output_rw(0);
0084:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0085:  MOVLW  0F
0086:  BSF    03.5
0087:  ANDWF  08,W
0088:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0089:  BCF    08.0
....................    lcd_rs_tris();
008A:  BCF    08.1
....................    lcd_rw_tris();
008B:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
008C:  MOVLW  0F
008D:  BCF    03.5
008E:  MOVWF  42
008F:  CALL   013
....................    for(i=1;i<=3;++i)
0090:  MOVLW  01
0091:  MOVWF  3B
0092:  MOVF   3B,W
0093:  SUBLW  03
0094:  BTFSS  03.0
0095:  GOTO   09E
....................    {
....................        lcd_send_nibble(3);
0096:  MOVLW  03
0097:  MOVWF  49
0098:  CALL   028
....................        delay_ms(5);
0099:  MOVLW  05
009A:  MOVWF  42
009B:  CALL   013
009C:  INCF   3B,F
009D:  GOTO   092
....................    }
....................    
....................    lcd_send_nibble(2);
009E:  MOVLW  02
009F:  MOVWF  49
00A0:  CALL   028
....................    delay_ms(5);
00A1:  MOVLW  05
00A2:  MOVWF  42
00A3:  CALL   013
....................    for(i=0;i<=3;++i)
00A4:  CLRF   3B
00A5:  MOVF   3B,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A9:  MOVLW  3C
00AA:  ADDWF  3B,W
00AB:  MOVWF  04
00AC:  BCF    03.7
00AD:  MOVF   00,W
00AE:  MOVWF  40
00AF:  CLRF   46
00B0:  MOVF   40,W
00B1:  MOVWF  47
00B2:  CALL   03A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B3:  INCF   3B,F
00B4:  GOTO   0A5
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   45E (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B8:  DECFSZ 43,W
00B9:  GOTO   0BB
00BA:  GOTO   0BE
....................       address=LCD_LINE_TWO;
00BB:  MOVLW  40
00BC:  MOVWF  44
00BD:  GOTO   0BF
....................    else
....................       address=0;
00BE:  CLRF   44
....................      
....................    address+=x-1;
00BF:  MOVLW  01
00C0:  SUBWF  42,W
00C1:  ADDWF  44,F
....................    lcd_send_byte(0,0x80|address);
00C2:  MOVF   44,W
00C3:  IORLW  80
00C4:  MOVWF  45
00C5:  CLRF   46
00C6:  MOVF   45,W
00C7:  MOVWF  47
00C8:  CALL   03A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C9:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00CA:  MOVF   41,W
00CB:  XORLW  07
00CC:  BTFSC  03.2
00CD:  GOTO   0D8
00CE:  XORLW  0B
00CF:  BTFSC  03.2
00D0:  GOTO   0DD
00D1:  XORLW  06
00D2:  BTFSC  03.2
00D3:  GOTO   0E5
00D4:  XORLW  02
00D5:  BTFSC  03.2
00D6:  GOTO   0EB
00D7:  GOTO   0F0
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D8:  MOVLW  01
00D9:  MOVWF  42
00DA:  MOVWF  43
00DB:  CALL   0B8
00DC:  GOTO   0F5
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00DD:  CLRF   46
00DE:  MOVLW  01
00DF:  MOVWF  47
00E0:  CALL   03A
....................                      delay_ms(2);
00E1:  MOVLW  02
00E2:  MOVWF  42
00E3:  CALL   013
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00E4:  GOTO   0F5
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00E5:  MOVLW  01
00E6:  MOVWF  42
00E7:  MOVLW  02
00E8:  MOVWF  43
00E9:  CALL   0B8
00EA:  GOTO   0F5
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00EB:  CLRF   46
00EC:  MOVLW  10
00ED:  MOVWF  47
00EE:  CALL   03A
00EF:  GOTO   0F5
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00F0:  MOVLW  01
00F1:  MOVWF  46
00F2:  MOVF   41,W
00F3:  MOVWF  47
00F4:  CALL   03A
....................      #endif
....................    }
00F5:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
....................  
.................... #BYTE PORTA= 5    //Se especifica la ubicacion en memoria del puerto A
.................... #BYTE PORTD= 8    //Se especifica la ubicacion en memoria del puerto D
....................  
.................... float V1, I1, V2=0, I2=0, P1, P2;        //Variable almacena los bits
.................... int duty = 50;
....................  
.................... void main(){
*
0425:  MOVF   03,W
0426:  ANDLW  1F
0427:  MOVWF  03
0428:  CLRF   2B
0429:  CLRF   2A
042A:  CLRF   29
042B:  CLRF   28
042C:  CLRF   2F
042D:  CLRF   2E
042E:  CLRF   2D
042F:  CLRF   2C
0430:  MOVLW  32
0431:  MOVWF  38
0432:  CLRF   3A
0433:  CLRF   39
0434:  BSF    03.5
0435:  BSF    03.6
0436:  MOVF   09,W
0437:  ANDLW  C0
0438:  MOVWF  09
0439:  BCF    03.6
043A:  BCF    1F.4
043B:  BCF    1F.5
043C:  MOVLW  00
043D:  BSF    03.6
043E:  MOVWF  08
043F:  BCF    03.5
0440:  CLRF   07
0441:  CLRF   08
0442:  CLRF   09
0443:  BCF    03.7
....................    set_tris_a(0b00000011);          //Configuro los pines RA0 y RA1 como entrada
0444:  MOVLW  03
0445:  BSF    03.5
0446:  BCF    03.6
0447:  MOVWF  05
....................    set_tris_d(0);                   //Pongo el PuertoD como Salida
0448:  MOVLW  00
0449:  MOVWF  08
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo
044A:  BSF    03.6
044B:  MOVF   09,W
044C:  ANDLW  C0
044D:  IORLW  1F
044E:  MOVWF  09
044F:  BCF    03.6
0450:  BCF    1F.4
0451:  BCF    1F.5
0452:  MOVLW  FF
0453:  BSF    03.6
0454:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion
0455:  BCF    03.5
0456:  BCF    03.6
0457:  BSF    1F.6
0458:  BSF    1F.7
0459:  BSF    03.5
045A:  BSF    1F.7
045B:  BCF    03.5
045C:  BSF    1F.0
....................    lcd_init();                      //Inicializo el LCD
045D:  GOTO   07A
....................    lcd_putc("\f");                  //Borro el LCD
045E:  MOVLW  04
045F:  BSF    03.6
0460:  MOVWF  0D
0461:  MOVLW  00
0462:  MOVWF  0F
0463:  BCF    03.6
0464:  CALL   0F6
....................    
....................    while(1)
....................    {
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0)
0465:  MOVLW  00
0466:  MOVWF  78
0467:  MOVF   1F,W
0468:  ANDLW  C3
0469:  IORWF  78,W
046A:  MOVWF  1F
....................        delay_us(50);                //Retardo de 50 us para leer la data
046B:  MOVLW  10
046C:  MOVWF  77
046D:  DECFSZ 77,F
046E:  GOTO   46D
046F:  NOP
....................        V1=read_adc();               //Guardo en bits el voltaje leido por el canal 0
0470:  BSF    1F.1
0471:  BTFSC  1F.1
0472:  GOTO   471
0473:  MOVF   1E,W
0474:  MOVWF  79
0475:  BSF    03.5
0476:  MOVF   1E,W
0477:  MOVWF  78
0478:  MOVF   79,W
0479:  MOVWF  7A
047A:  MOVF   1E,W
047B:  BCF    03.5
047C:  MOVWF  3B
047D:  MOVF   79,W
047E:  MOVWF  3C
047F:  CALL   14C
0480:  MOVF   7A,W
0481:  MOVWF  23
0482:  MOVF   79,W
0483:  MOVWF  22
0484:  MOVF   78,W
0485:  MOVWF  21
0486:  MOVF   77,W
0487:  MOVWF  20
....................        V1 = V1*0.0048828125;        //Valor real del voltaje medido
0488:  MOVF   23,W
0489:  MOVWF  3E
048A:  MOVF   22,W
048B:  MOVWF  3D
048C:  MOVF   21,W
048D:  MOVWF  3C
048E:  MOVF   20,W
048F:  MOVWF  3B
0490:  CLRF   42
0491:  CLRF   41
0492:  MOVLW  20
0493:  MOVWF  40
0494:  MOVLW  77
0495:  MOVWF  3F
0496:  CALL   169
0497:  MOVF   7A,W
0498:  MOVWF  23
0499:  MOVF   79,W
049A:  MOVWF  22
049B:  MOVF   78,W
049C:  MOVWF  21
049D:  MOVF   77,W
049E:  MOVWF  20
....................        
....................        set_adc_channel(1);          //Selecciono el canal 1 (RA1)
049F:  MOVLW  04
04A0:  MOVWF  78
04A1:  MOVF   1F,W
04A2:  ANDLW  C3
04A3:  IORWF  78,W
04A4:  MOVWF  1F
....................        delay_us(50);                //Retardo de 50 us para leer la data
04A5:  MOVLW  10
04A6:  MOVWF  77
04A7:  DECFSZ 77,F
04A8:  GOTO   4A7
04A9:  NOP
....................        I1=read_adc();               //Guardo en bits la corriente leida por el canal 1
04AA:  BSF    1F.1
04AB:  BTFSC  1F.1
04AC:  GOTO   4AB
04AD:  MOVF   1E,W
04AE:  MOVWF  79
04AF:  BSF    03.5
04B0:  MOVF   1E,W
04B1:  MOVWF  78
04B2:  MOVF   79,W
04B3:  MOVWF  7A
04B4:  MOVF   1E,W
04B5:  BCF    03.5
04B6:  MOVWF  3B
04B7:  MOVF   79,W
04B8:  MOVWF  3C
04B9:  CALL   14C
04BA:  MOVF   7A,W
04BB:  MOVWF  27
04BC:  MOVF   79,W
04BD:  MOVWF  26
04BE:  MOVF   78,W
04BF:  MOVWF  25
04C0:  MOVF   77,W
04C1:  MOVWF  24
....................        I1= I1*0.0048828125;         //Valor real del voltaje medido
04C2:  MOVF   27,W
04C3:  MOVWF  3E
04C4:  MOVF   26,W
04C5:  MOVWF  3D
04C6:  MOVF   25,W
04C7:  MOVWF  3C
04C8:  MOVF   24,W
04C9:  MOVWF  3B
04CA:  CLRF   42
04CB:  CLRF   41
04CC:  MOVLW  20
04CD:  MOVWF  40
04CE:  MOVLW  77
04CF:  MOVWF  3F
04D0:  CALL   169
04D1:  MOVF   7A,W
04D2:  MOVWF  27
04D3:  MOVF   79,W
04D4:  MOVWF  26
04D5:  MOVF   78,W
04D6:  MOVWF  25
04D7:  MOVF   77,W
04D8:  MOVWF  24
....................    
....................    /*-----------Algoritmo MPPT----------*/
....................        P1 = V1*I1;
04D9:  MOVF   23,W
04DA:  MOVWF  3E
04DB:  MOVF   22,W
04DC:  MOVWF  3D
04DD:  MOVF   21,W
04DE:  MOVWF  3C
04DF:  MOVF   20,W
04E0:  MOVWF  3B
04E1:  MOVF   27,W
04E2:  MOVWF  42
04E3:  MOVF   26,W
04E4:  MOVWF  41
04E5:  MOVF   25,W
04E6:  MOVWF  40
04E7:  MOVF   24,W
04E8:  MOVWF  3F
04E9:  CALL   169
04EA:  MOVF   7A,W
04EB:  MOVWF  33
04EC:  MOVF   79,W
04ED:  MOVWF  32
04EE:  MOVF   78,W
04EF:  MOVWF  31
04F0:  MOVF   77,W
04F1:  MOVWF  30
....................        P2 = V2*I2;
04F2:  MOVF   2B,W
04F3:  MOVWF  3E
04F4:  MOVF   2A,W
04F5:  MOVWF  3D
04F6:  MOVF   29,W
04F7:  MOVWF  3C
04F8:  MOVF   28,W
04F9:  MOVWF  3B
04FA:  MOVF   2F,W
04FB:  MOVWF  42
04FC:  MOVF   2E,W
04FD:  MOVWF  41
04FE:  MOVF   2D,W
04FF:  MOVWF  40
0500:  MOVF   2C,W
0501:  MOVWF  3F
0502:  CALL   169
0503:  MOVF   7A,W
0504:  MOVWF  37
0505:  MOVF   79,W
0506:  MOVWF  36
0507:  MOVF   78,W
0508:  MOVWF  35
0509:  MOVF   77,W
050A:  MOVWF  34
....................        
....................        if(P1-P2 == 0){
050B:  BSF    03.1
050C:  MOVF   33,W
050D:  MOVWF  3E
050E:  MOVF   32,W
050F:  MOVWF  3D
0510:  MOVF   31,W
0511:  MOVWF  3C
0512:  MOVF   30,W
0513:  MOVWF  3B
0514:  MOVF   37,W
0515:  MOVWF  42
0516:  MOVF   36,W
0517:  MOVWF  41
0518:  MOVF   35,W
0519:  MOVWF  40
051A:  MOVF   34,W
051B:  MOVWF  3F
051C:  CALL   1DE
051D:  MOVF   7A,W
051E:  MOVWF  3E
051F:  MOVF   79,W
0520:  MOVWF  3D
0521:  MOVF   78,W
0522:  MOVWF  3C
0523:  MOVF   77,W
0524:  MOVWF  3B
0525:  MOVF   3E,W
0526:  MOVWF  42
0527:  MOVF   3D,W
0528:  MOVWF  41
0529:  MOVF   3C,W
052A:  MOVWF  40
052B:  MOVF   3B,W
052C:  MOVWF  3F
052D:  CLRF   46
052E:  CLRF   45
052F:  CLRF   44
0530:  CLRF   43
0531:  CALL   31F
0532:  BTFSC  03.2
....................          duty = duty;
....................        }
0533:  GOTO   5E6
....................        else{
....................           if(P1 - P2 > 0){
0534:  BSF    03.1
0535:  MOVF   33,W
0536:  MOVWF  3E
0537:  MOVF   32,W
0538:  MOVWF  3D
0539:  MOVF   31,W
053A:  MOVWF  3C
053B:  MOVF   30,W
053C:  MOVWF  3B
053D:  MOVF   37,W
053E:  MOVWF  42
053F:  MOVF   36,W
0540:  MOVWF  41
0541:  MOVF   35,W
0542:  MOVWF  40
0543:  MOVF   34,W
0544:  MOVWF  3F
0545:  CALL   1DE
0546:  MOVF   7A,W
0547:  MOVWF  3E
0548:  MOVF   79,W
0549:  MOVWF  3D
054A:  MOVF   78,W
054B:  MOVWF  3C
054C:  MOVF   77,W
054D:  MOVWF  3B
054E:  CLRF   42
054F:  CLRF   41
0550:  CLRF   40
0551:  CLRF   3F
0552:  MOVF   3E,W
0553:  MOVWF  46
0554:  MOVF   3D,W
0555:  MOVWF  45
0556:  MOVF   3C,W
0557:  MOVWF  44
0558:  MOVF   3B,W
0559:  MOVWF  43
055A:  CALL   31F
055B:  BTFSS  03.0
055C:  GOTO   5B8
....................             if(V1 - V2 > 0){
055D:  BSF    03.1
055E:  MOVF   23,W
055F:  MOVWF  3E
0560:  MOVF   22,W
0561:  MOVWF  3D
0562:  MOVF   21,W
0563:  MOVWF  3C
0564:  MOVF   20,W
0565:  MOVWF  3B
0566:  MOVF   2B,W
0567:  MOVWF  42
0568:  MOVF   2A,W
0569:  MOVWF  41
056A:  MOVF   29,W
056B:  MOVWF  40
056C:  MOVF   28,W
056D:  MOVWF  3F
056E:  CALL   1DE
056F:  MOVF   7A,W
0570:  MOVWF  3E
0571:  MOVF   79,W
0572:  MOVWF  3D
0573:  MOVF   78,W
0574:  MOVWF  3C
0575:  MOVF   77,W
0576:  MOVWF  3B
0577:  CLRF   42
0578:  CLRF   41
0579:  CLRF   40
057A:  CLRF   3F
057B:  MOVF   3E,W
057C:  MOVWF  46
057D:  MOVF   3D,W
057E:  MOVWF  45
057F:  MOVF   3C,W
0580:  MOVWF  44
0581:  MOVF   3B,W
0582:  MOVWF  43
0583:  CALL   31F
0584:  BTFSS  03.0
0585:  GOTO   5B5
....................                if(I1 - I2 > 0){
0586:  BSF    03.1
0587:  MOVF   27,W
0588:  MOVWF  3E
0589:  MOVF   26,W
058A:  MOVWF  3D
058B:  MOVF   25,W
058C:  MOVWF  3C
058D:  MOVF   24,W
058E:  MOVWF  3B
058F:  MOVF   2F,W
0590:  MOVWF  42
0591:  MOVF   2E,W
0592:  MOVWF  41
0593:  MOVF   2D,W
0594:  MOVWF  40
0595:  MOVF   2C,W
0596:  MOVWF  3F
0597:  CALL   1DE
0598:  MOVF   7A,W
0599:  MOVWF  3E
059A:  MOVF   79,W
059B:  MOVWF  3D
059C:  MOVF   78,W
059D:  MOVWF  3C
059E:  MOVF   77,W
059F:  MOVWF  3B
05A0:  CLRF   42
05A1:  CLRF   41
05A2:  CLRF   40
05A3:  CLRF   3F
05A4:  MOVF   3E,W
05A5:  MOVWF  46
05A6:  MOVF   3D,W
05A7:  MOVWF  45
05A8:  MOVF   3C,W
05A9:  MOVWF  44
05AA:  MOVF   3B,W
05AB:  MOVWF  43
05AC:  CALL   31F
05AD:  BTFSS  03.0
05AE:  GOTO   5B2
....................                   duty = duty + 1;
05AF:  MOVLW  01
05B0:  ADDWF  38,F
....................                }
05B1:  GOTO   5B4
....................                else{
....................                   duty = duty - 1;
05B2:  MOVLW  01
05B3:  SUBWF  38,F
....................                }
....................             }
05B4:  GOTO   5B7
....................             else{
....................                duty = duty + 1;
05B5:  MOVLW  01
05B6:  ADDWF  38,F
....................             }
....................           }
05B7:  GOTO   5E6
....................           else{
....................             if(V1 - V2 > 0){
05B8:  BSF    03.1
05B9:  MOVF   23,W
05BA:  MOVWF  3E
05BB:  MOVF   22,W
05BC:  MOVWF  3D
05BD:  MOVF   21,W
05BE:  MOVWF  3C
05BF:  MOVF   20,W
05C0:  MOVWF  3B
05C1:  MOVF   2B,W
05C2:  MOVWF  42
05C3:  MOVF   2A,W
05C4:  MOVWF  41
05C5:  MOVF   29,W
05C6:  MOVWF  40
05C7:  MOVF   28,W
05C8:  MOVWF  3F
05C9:  CALL   1DE
05CA:  MOVF   7A,W
05CB:  MOVWF  3E
05CC:  MOVF   79,W
05CD:  MOVWF  3D
05CE:  MOVF   78,W
05CF:  MOVWF  3C
05D0:  MOVF   77,W
05D1:  MOVWF  3B
05D2:  CLRF   42
05D3:  CLRF   41
05D4:  CLRF   40
05D5:  CLRF   3F
05D6:  MOVF   3E,W
05D7:  MOVWF  46
05D8:  MOVF   3D,W
05D9:  MOVWF  45
05DA:  MOVF   3C,W
05DB:  MOVWF  44
05DC:  MOVF   3B,W
05DD:  MOVWF  43
05DE:  CALL   31F
05DF:  BTFSS  03.0
05E0:  GOTO   5E4
....................                duty = duty + 1;
05E1:  MOVLW  01
05E2:  ADDWF  38,F
....................             }
05E3:  GOTO   5E6
....................             else{
....................                   duty = duty - 1;
05E4:  MOVLW  01
05E5:  SUBWF  38,F
....................             }
....................           }  
....................        }
....................        V2 = V1;
05E6:  MOVF   23,W
05E7:  MOVWF  2B
05E8:  MOVF   22,W
05E9:  MOVWF  2A
05EA:  MOVF   21,W
05EB:  MOVWF  29
05EC:  MOVF   20,W
05ED:  MOVWF  28
....................        I2 = I1;
05EE:  MOVF   27,W
05EF:  MOVWF  2F
05F0:  MOVF   26,W
05F1:  MOVWF  2E
05F2:  MOVF   25,W
05F3:  MOVWF  2D
05F4:  MOVF   24,W
05F5:  MOVWF  2C
....................        
....................        lcd_gotoxy(1,1);                  //Ubiquese en la posicion 1,1
05F6:  MOVLW  01
05F7:  MOVWF  42
05F8:  MOVWF  43
05F9:  CALL   0B8
....................        lcd_putc("El Duty Cycle es:");
05FA:  MOVLW  05
05FB:  BSF    03.6
05FC:  MOVWF  0D
05FD:  MOVLW  00
05FE:  MOVWF  0F
05FF:  BCF    03.6
0600:  CALL   0F6
....................        lcd_gotoxy(2,2);                  //Ubiquese en la posicion 2,2
0601:  MOVLW  02
0602:  MOVWF  42
0603:  MOVWF  43
0604:  CALL   0B8
....................        printf(lcd_putc,"D = %i",duty);   //Muestra el valor numerico de la conversionconversion
0605:  MOVLW  0E
0606:  BSF    03.6
0607:  MOVWF  0D
0608:  MOVLW  00
0609:  MOVWF  0F
060A:  BCF    03.0
060B:  MOVLW  04
060C:  BCF    03.6
060D:  MOVWF  3B
060E:  GOTO   35E
060F:  MOVF   38,W
0610:  MOVWF  3B
0611:  MOVLW  18
0612:  MOVWF  3C
0613:  GOTO   3CC
....................        delay_ms(500);
0614:  MOVLW  02
0615:  MOVWF  3B
0616:  MOVLW  FA
0617:  MOVWF  42
0618:  CALL   013
0619:  DECFSZ 3B,F
061A:  GOTO   616
....................        lcd_putc("\f");                   // Borramos LCD
061B:  MOVLW  12
061C:  BSF    03.6
061D:  MOVWF  0D
061E:  MOVLW  00
061F:  MOVWF  0F
0620:  BCF    03.6
0621:  CALL   0F6
0622:  GOTO   465
....................    }
.................... }
0623:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
