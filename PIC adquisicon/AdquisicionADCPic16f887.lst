CCS PCM C Compiler, Version 5.095d, 1               11-Aug-20 22:41
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Usuario\OneDrive\Escritorio\USB\Verano 2020\Electiva de Electronica de Potencia\Proyecto 2\Simulaci-n-de-Paneles-PV-en-proteus\PIC adquisicon\AdquisicionADCPic16f887.lst

               ROM used:   1149 words (14%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           45 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   373
0003:  NOP
.................... #INCLUDE <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 0C,00
0005:  DATA D6,37
0006:  DATA 6C,3A
0007:  DATA 61,35
0008:  DATA 65,10
0009:  DATA CD,32
000A:  DATA E4,34
000B:  DATA E4,37
000C:  DATA 00,01
000D:  DATA C5,39
000E:  DATA 20,2B
000F:  DATA 3D,10
0010:  DATA 25,33
0011:  DATA 00,00
0012:  DATA 0C,00
0013:  DATA C3,37
0014:  DATA 72,39
0015:  DATA E9,32
0016:  DATA 6E,3A
0017:  DATA 65,10
0018:  DATA CD,32
0019:  DATA E4,34
001A:  DATA E4,30
001B:  DATA 00,01
001C:  DATA C5,39
001D:  DATA A0,24
001E:  DATA 3D,10
001F:  DATA 25,33
0020:  DATA 00,01
0021:  DATA 0C,00
*
0105:  MOVF   0B,W
0106:  MOVWF  2E
0107:  BCF    0B.7
0108:  BSF    03.5
0109:  BSF    03.6
010A:  BSF    0C.7
010B:  BSF    0C.0
010C:  NOP
010D:  NOP
010E:  BCF    03.5
010F:  BCF    03.6
0110:  BTFSC  2E.7
0111:  BSF    0B.7
0112:  BSF    03.6
0113:  MOVF   0C,W
0114:  ANDLW  7F
0115:  BTFSC  03.2
0116:  GOTO   159
0117:  BCF    03.6
0118:  MOVWF  2E
0119:  BSF    03.6
011A:  MOVF   0D,W
011B:  BCF    03.6
011C:  MOVWF  2F
011D:  BSF    03.6
011E:  MOVF   0F,W
011F:  BCF    03.6
0120:  MOVWF  30
0121:  MOVF   2E,W
0122:  MOVWF  3B
0123:  CALL   0D9
0124:  MOVF   2F,W
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  BCF    03.6
0128:  MOVF   30,W
0129:  BSF    03.6
012A:  MOVWF  0F
012B:  BCF    03.6
012C:  MOVF   0B,W
012D:  MOVWF  31
012E:  BCF    0B.7
012F:  BSF    03.5
0130:  BSF    03.6
0131:  BSF    0C.7
0132:  BSF    0C.0
0133:  NOP
0134:  NOP
0135:  BCF    03.5
0136:  BCF    03.6
0137:  BTFSC  31.7
0138:  BSF    0B.7
0139:  BSF    03.6
013A:  RLF    0C,W
013B:  RLF    0E,W
013C:  ANDLW  7F
013D:  BTFSC  03.2
013E:  GOTO   159
013F:  BCF    03.6
0140:  MOVWF  2E
0141:  BSF    03.6
0142:  MOVF   0D,W
0143:  BCF    03.6
0144:  MOVWF  2F
0145:  BSF    03.6
0146:  MOVF   0F,W
0147:  BCF    03.6
0148:  MOVWF  30
0149:  MOVF   2E,W
014A:  MOVWF  3B
014B:  CALL   0D9
014C:  MOVF   2F,W
014D:  BSF    03.6
014E:  MOVWF  0D
014F:  BCF    03.6
0150:  MOVF   30,W
0151:  BSF    03.6
0152:  MOVWF  0F
0153:  INCF   0D,F
0154:  BTFSC  03.2
0155:  INCF   0F,F
0156:  BCF    03.6
0157:  GOTO   105
0158:  BSF    03.6
0159:  BCF    03.6
015A:  RETURN
015B:  MOVLW  8E
015C:  MOVWF  77
015D:  MOVF   2F,W
015E:  MOVWF  78
015F:  MOVF   2E,W
0160:  MOVWF  79
0161:  CLRF   7A
0162:  MOVF   78,F
0163:  BTFSS  03.2
0164:  GOTO   16F
0165:  MOVF   79,W
0166:  MOVWF  78
0167:  CLRF   79
0168:  MOVLW  08
0169:  SUBWF  77,F
016A:  MOVF   78,F
016B:  BTFSS  03.2
016C:  GOTO   16F
016D:  CLRF   77
016E:  GOTO   177
016F:  BCF    03.0
0170:  BTFSC  78.7
0171:  GOTO   176
0172:  RLF    79,F
0173:  RLF    78,F
0174:  DECF   77,F
0175:  GOTO   16F
0176:  BCF    78.7
0177:  RETURN
0178:  MOVF   3B,W
0179:  BTFSC  03.2
017A:  GOTO   1E8
017B:  MOVWF  43
017C:  MOVF   3F,W
017D:  BTFSC  03.2
017E:  GOTO   1E8
017F:  ADDWF  43,F
0180:  BTFSC  03.0
0181:  GOTO   189
0182:  MOVLW  7F
0183:  SUBWF  43,F
0184:  BTFSS  03.0
0185:  GOTO   1E8
0186:  BTFSC  03.2
0187:  GOTO   1E8
0188:  GOTO   18D
0189:  MOVLW  81
018A:  ADDWF  43,F
018B:  BTFSC  03.0
018C:  GOTO   1E8
018D:  MOVF   43,W
018E:  MOVWF  77
018F:  CLRF   78
0190:  CLRF   79
0191:  CLRF   7A
0192:  MOVF   3C,W
0193:  MOVWF  47
0194:  BSF    47.7
0195:  MOVF   3D,W
0196:  MOVWF  46
0197:  MOVF   3E,W
0198:  MOVWF  45
0199:  MOVLW  18
019A:  MOVWF  43
019B:  CLRF   44
019C:  BTFSS  45.0
019D:  GOTO   1B6
019E:  MOVF   42,W
019F:  ADDWF  7A,F
01A0:  BTFSS  03.0
01A1:  GOTO   1A8
01A2:  INCF   79,F
01A3:  BTFSS  03.2
01A4:  GOTO   1A8
01A5:  INCF   78,F
01A6:  BTFSC  03.2
01A7:  BSF    44.7
01A8:  MOVF   41,W
01A9:  ADDWF  79,F
01AA:  BTFSS  03.0
01AB:  GOTO   1AF
01AC:  INCF   78,F
01AD:  BTFSC  03.2
01AE:  BSF    44.7
01AF:  MOVF   40,W
01B0:  MOVWF  3D
01B1:  BSF    3D.7
01B2:  MOVF   3D,W
01B3:  ADDWF  78,F
01B4:  BTFSC  03.0
01B5:  BSF    44.7
01B6:  RLF    44,F
01B7:  RRF    78,F
01B8:  RRF    79,F
01B9:  RRF    7A,F
01BA:  RRF    47,F
01BB:  RRF    46,F
01BC:  RRF    45,F
01BD:  BCF    03.0
01BE:  DECFSZ 43,F
01BF:  GOTO   19B
01C0:  MOVLW  01
01C1:  ADDWF  77,F
01C2:  BTFSC  03.0
01C3:  GOTO   1E8
01C4:  BTFSC  78.7
01C5:  GOTO   1CD
01C6:  RLF    47,F
01C7:  RLF    7A,F
01C8:  RLF    79,F
01C9:  RLF    78,F
01CA:  DECF   77,F
01CB:  BTFSC  03.2
01CC:  GOTO   1E8
01CD:  BTFSS  47.7
01CE:  GOTO   1DE
01CF:  INCF   7A,F
01D0:  BTFSS  03.2
01D1:  GOTO   1DE
01D2:  INCF   79,F
01D3:  BTFSS  03.2
01D4:  GOTO   1DE
01D5:  INCF   78,F
01D6:  BTFSS  03.2
01D7:  GOTO   1DE
01D8:  RRF    78,F
01D9:  RRF    79,F
01DA:  RRF    7A,F
01DB:  INCF   77,F
01DC:  BTFSC  03.2
01DD:  GOTO   1E8
01DE:  MOVF   3C,W
01DF:  MOVWF  44
01E0:  MOVF   40,W
01E1:  XORWF  44,F
01E2:  BTFSS  44.7
01E3:  GOTO   1E6
01E4:  BSF    78.7
01E5:  GOTO   1EC
01E6:  BCF    78.7
01E7:  GOTO   1EC
01E8:  CLRF   77
01E9:  CLRF   78
01EA:  CLRF   79
01EB:  CLRF   7A
01EC:  RETURN
01ED:  MOVF   0B,W
01EE:  MOVWF  2F
01EF:  BCF    0B.7
01F0:  BSF    03.5
01F1:  BSF    03.6
01F2:  BSF    0C.7
01F3:  BSF    0C.0
01F4:  NOP
01F5:  NOP
01F6:  BCF    03.5
01F7:  BCF    03.6
01F8:  BTFSC  2F.7
01F9:  BSF    0B.7
01FA:  BTFSC  03.0
01FB:  GOTO   224
01FC:  BSF    03.6
01FD:  MOVF   0C,W
01FE:  ANDLW  7F
01FF:  BCF    03.6
0200:  MOVWF  2F
0201:  BSF    03.6
0202:  MOVF   0D,W
0203:  BCF    03.6
0204:  MOVWF  30
0205:  BSF    03.6
0206:  MOVF   0F,W
0207:  BCF    03.6
0208:  MOVWF  31
0209:  MOVF   2F,W
020A:  MOVWF  3B
020B:  CALL   0D9
020C:  MOVF   30,W
020D:  BSF    03.6
020E:  MOVWF  0D
020F:  BCF    03.6
0210:  MOVF   31,W
0211:  BSF    03.6
0212:  MOVWF  0F
0213:  BCF    03.6
0214:  MOVF   0B,W
0215:  MOVWF  32
0216:  BCF    0B.7
0217:  BSF    03.5
0218:  BSF    03.6
0219:  BSF    0C.7
021A:  BSF    0C.0
021B:  NOP
021C:  NOP
021D:  BCF    03.5
021E:  BCF    03.6
021F:  BTFSC  32.7
0220:  BSF    0B.7
0221:  DECFSZ 2E,F
0222:  GOTO   224
0223:  GOTO   243
0224:  BSF    03.6
0225:  RLF    0C,W
0226:  RLF    0E,W
0227:  ANDLW  7F
0228:  BCF    03.6
0229:  MOVWF  2F
022A:  BSF    03.6
022B:  MOVF   0D,W
022C:  BCF    03.6
022D:  MOVWF  30
022E:  BSF    03.6
022F:  MOVF   0F,W
0230:  BCF    03.6
0231:  MOVWF  31
0232:  MOVF   2F,W
0233:  MOVWF  3B
0234:  CALL   0D9
0235:  MOVF   30,W
0236:  BSF    03.6
0237:  MOVWF  0D
0238:  BCF    03.6
0239:  MOVF   31,W
023A:  BSF    03.6
023B:  MOVWF  0F
023C:  INCF   0D,F
023D:  BTFSC  03.2
023E:  INCF   0F,F
023F:  BCF    03.0
0240:  BCF    03.6
0241:  DECFSZ 2E,F
0242:  GOTO   1ED
0243:  RETURN
0244:  BTFSC  03.1
0245:  GOTO   249
0246:  MOVLW  43
0247:  MOVWF  04
0248:  BCF    03.7
0249:  CLRF   77
024A:  CLRF   78
024B:  CLRF   79
024C:  CLRF   7A
024D:  CLRF   43
024E:  CLRF   44
024F:  CLRF   45
0250:  CLRF   46
0251:  MOVF   42,W
0252:  IORWF  41,W
0253:  IORWF  40,W
0254:  IORWF  3F,W
0255:  BTFSC  03.2
0256:  GOTO   287
0257:  MOVLW  20
0258:  MOVWF  47
0259:  BCF    03.0
025A:  RLF    3B,F
025B:  RLF    3C,F
025C:  RLF    3D,F
025D:  RLF    3E,F
025E:  RLF    43,F
025F:  RLF    44,F
0260:  RLF    45,F
0261:  RLF    46,F
0262:  MOVF   42,W
0263:  SUBWF  46,W
0264:  BTFSS  03.2
0265:  GOTO   270
0266:  MOVF   41,W
0267:  SUBWF  45,W
0268:  BTFSS  03.2
0269:  GOTO   270
026A:  MOVF   40,W
026B:  SUBWF  44,W
026C:  BTFSS  03.2
026D:  GOTO   270
026E:  MOVF   3F,W
026F:  SUBWF  43,W
0270:  BTFSS  03.0
0271:  GOTO   281
0272:  MOVF   3F,W
0273:  SUBWF  43,F
0274:  MOVF   40,W
0275:  BTFSS  03.0
0276:  INCFSZ 40,W
0277:  SUBWF  44,F
0278:  MOVF   41,W
0279:  BTFSS  03.0
027A:  INCFSZ 41,W
027B:  SUBWF  45,F
027C:  MOVF   42,W
027D:  BTFSS  03.0
027E:  INCFSZ 42,W
027F:  SUBWF  46,F
0280:  BSF    03.0
0281:  RLF    77,F
0282:  RLF    78,F
0283:  RLF    79,F
0284:  RLF    7A,F
0285:  DECFSZ 47,F
0286:  GOTO   259
0287:  MOVF   43,W
0288:  MOVWF  00
0289:  INCF   04,F
028A:  MOVF   44,W
028B:  MOVWF  00
028C:  INCF   04,F
028D:  MOVF   45,W
028E:  MOVWF  00
028F:  INCF   04,F
0290:  MOVF   46,W
0291:  MOVWF  00
0292:  RETURN
0293:  MOVF   04,W
0294:  MOVWF  33
0295:  MOVF   32,W
0296:  MOVWF  35
0297:  BTFSC  03.2
0298:  GOTO   2B2
0299:  MOVF   31,W
029A:  MOVWF  3E
029B:  MOVF   30,W
029C:  MOVWF  3D
029D:  MOVF   2F,W
029E:  MOVWF  3C
029F:  MOVF   2E,W
02A0:  MOVWF  3B
02A1:  CLRF   42
02A2:  CLRF   41
02A3:  MOVLW  20
02A4:  MOVWF  40
02A5:  MOVLW  82
02A6:  MOVWF  3F
02A7:  CALL   178
02A8:  MOVF   7A,W
02A9:  MOVWF  31
02AA:  MOVF   79,W
02AB:  MOVWF  30
02AC:  MOVF   78,W
02AD:  MOVWF  2F
02AE:  MOVF   77,W
02AF:  MOVWF  2E
02B0:  DECFSZ 35,F
02B1:  GOTO   299
02B2:  MOVF   31,W
02B3:  MOVWF  3E
02B4:  MOVF   30,W
02B5:  MOVWF  3D
02B6:  MOVF   2F,W
02B7:  MOVWF  3C
02B8:  MOVF   2E,W
02B9:  MOVWF  3B
02BA:  MOVF   3B,W
02BB:  SUBLW  B6
02BC:  MOVWF  3B
02BD:  CLRF   7A
02BE:  MOVF   3C,W
02BF:  MOVWF  3F
02C0:  BSF    3C.7
02C1:  BCF    03.0
02C2:  RRF    3C,F
02C3:  RRF    3D,F
02C4:  RRF    3E,F
02C5:  RRF    7A,F
02C6:  RRF    79,F
02C7:  RRF    78,F
02C8:  RRF    77,F
02C9:  DECFSZ 3B,F
02CA:  GOTO   2C1
02CB:  BTFSS  3F.7
02CC:  GOTO   2D8
02CD:  COMF   77,F
02CE:  COMF   78,F
02CF:  COMF   79,F
02D0:  COMF   7A,F
02D1:  INCF   77,F
02D2:  BTFSC  03.2
02D3:  INCF   78,F
02D4:  BTFSC  03.2
02D5:  INCF   79,F
02D6:  BTFSC  03.2
02D7:  INCF   7A,F
02D8:  MOVF   7A,W
02D9:  MOVWF  31
02DA:  MOVF   79,W
02DB:  MOVWF  30
02DC:  MOVF   78,W
02DD:  MOVWF  2F
02DE:  MOVF   77,W
02DF:  MOVWF  2E
02E0:  BTFSS  31.7
02E1:  GOTO   2EF
02E2:  DECF   33,F
02E3:  BSF    33.5
02E4:  COMF   2E,F
02E5:  COMF   2F,F
02E6:  COMF   30,F
02E7:  COMF   31,F
02E8:  INCF   2E,F
02E9:  BTFSC  03.2
02EA:  INCF   2F,F
02EB:  BTFSC  03.2
02EC:  INCF   30,F
02ED:  BTFSC  03.2
02EE:  INCF   31,F
02EF:  MOVLW  3B
02F0:  MOVWF  3A
02F1:  MOVLW  9A
02F2:  MOVWF  39
02F3:  MOVLW  CA
02F4:  MOVWF  38
02F5:  CLRF   37
02F6:  MOVLW  0A
02F7:  MOVWF  35
02F8:  MOVF   32,W
02F9:  BTFSC  03.2
02FA:  INCF   33,F
02FB:  BSF    03.1
02FC:  MOVLW  2E
02FD:  MOVWF  04
02FE:  BCF    03.7
02FF:  MOVF   31,W
0300:  MOVWF  3E
0301:  MOVF   30,W
0302:  MOVWF  3D
0303:  MOVF   2F,W
0304:  MOVWF  3C
0305:  MOVF   2E,W
0306:  MOVWF  3B
0307:  MOVF   3A,W
0308:  MOVWF  42
0309:  MOVF   39,W
030A:  MOVWF  41
030B:  MOVF   38,W
030C:  MOVWF  40
030D:  MOVF   37,W
030E:  MOVWF  3F
030F:  CALL   244
0310:  MOVF   78,W
0311:  MOVF   77,F
0312:  BTFSS  03.2
0313:  GOTO   327
0314:  INCF   32,W
0315:  SUBWF  35,W
0316:  BTFSC  03.2
0317:  GOTO   327
0318:  MOVF   33,W
0319:  BTFSC  03.2
031A:  GOTO   329
031B:  ANDLW  0F
031C:  SUBWF  35,W
031D:  BTFSC  03.2
031E:  GOTO   321
031F:  BTFSC  03.0
0320:  GOTO   359
0321:  BTFSC  33.7
0322:  GOTO   359
0323:  BTFSC  33.6
0324:  GOTO   329
0325:  MOVLW  20
0326:  GOTO   355
0327:  MOVLW  20
0328:  ANDWF  33,F
0329:  BTFSS  33.5
032A:  GOTO   337
032B:  BCF    33.5
032C:  MOVF   32,W
032D:  BTFSS  03.2
032E:  DECF   33,F
032F:  MOVF   77,W
0330:  MOVWF  33
0331:  MOVLW  2D
0332:  MOVWF  3B
0333:  CALL   0D9
0334:  MOVF   33,W
0335:  MOVWF  77
0336:  CLRF   33
0337:  MOVF   32,W
0338:  SUBWF  35,W
0339:  BTFSS  03.2
033A:  GOTO   345
033B:  MOVF   77,W
033C:  MOVWF  33
033D:  MOVLW  2E
033E:  MOVWF  3B
033F:  CALL   0D9
0340:  MOVF   33,W
0341:  MOVWF  77
0342:  MOVLW  20
0343:  ANDWF  33,F
0344:  MOVLW  00
0345:  MOVLW  30
0346:  BTFSS  33.5
0347:  GOTO   355
0348:  BCF    33.5
0349:  MOVF   32,W
034A:  BTFSS  03.2
034B:  DECF   33,F
034C:  MOVF   77,W
034D:  MOVWF  33
034E:  MOVLW  2D
034F:  MOVWF  3B
0350:  CALL   0D9
0351:  MOVF   33,W
0352:  MOVWF  77
0353:  CLRF   33
0354:  MOVLW  30
0355:  ADDWF  77,F
0356:  MOVF   77,W
0357:  MOVWF  3B
0358:  CALL   0D9
0359:  BCF    03.1
035A:  MOVF   3A,W
035B:  MOVWF  3E
035C:  MOVF   39,W
035D:  MOVWF  3D
035E:  MOVF   38,W
035F:  MOVWF  3C
0360:  MOVF   37,W
0361:  MOVWF  3B
0362:  CLRF   42
0363:  CLRF   41
0364:  CLRF   40
0365:  MOVLW  0A
0366:  MOVWF  3F
0367:  CALL   244
0368:  MOVF   7A,W
0369:  MOVWF  3A
036A:  MOVF   79,W
036B:  MOVWF  39
036C:  MOVF   78,W
036D:  MOVWF  38
036E:  MOVF   77,W
036F:  MOVWF  37
0370:  DECFSZ 35,F
0371:  GOTO   2FB
0372:  RETURN
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... //#USE DELAY(CLOCK=4000000) // Reloj interno 4MHz
.................... #use delay(clock=4000000,crystal)//Crystal Externo 4MHz
*
0022:  MOVLW  3C
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   036
0028:  MOVLW  01
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  4A
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  GOTO   034
0034:  DECFSZ 00,F
0035:  GOTO   028
0036:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP
.................... #INCLUDE <LCD.C>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  08,W
0052:  IORLW  F0
0053:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0054:  BCF    03.5
0055:  BSF    08.2
....................    delay_cycles(1);
0056:  NOP
....................    lcd_output_enable(1);
0057:  BSF    08.0
....................    delay_cycles(1);
0058:  NOP
....................    high = lcd_read_nibble();
0059:  CALL   043
005A:  MOVF   78,W
005B:  MOVWF  43
....................       
....................    lcd_output_enable(0);
005C:  BCF    08.0
....................    delay_cycles(1);
005D:  NOP
....................    lcd_output_enable(1);
005E:  BSF    08.0
....................    delay_us(1);
005F:  NOP
....................    low = lcd_read_nibble();
0060:  CALL   043
0061:  MOVF   78,W
0062:  MOVWF  42
....................       
....................    lcd_output_enable(0);
0063:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  08,W
0067:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0068:  BCF    03.5
0069:  SWAPF  43,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  42,W
006F:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0043:  MOVF   08,W
0044:  MOVWF  77
0045:  SWAPF  08,W
0046:  ANDLW  0F
0047:  MOVWF  78
....................   #endif
0048:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0037:  SWAPF  43,W
0038:  ANDLW  F0
0039:  MOVWF  77
003A:  MOVLW  0F
003B:  ANDWF  08,W
003C:  IORWF  77,W
003D:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
003E:  NOP
....................    lcd_output_enable(1);
003F:  BSF    08.0
....................    delay_us(2);
0040:  GOTO   041
....................    lcd_output_enable(0);
0041:  BCF    08.0
0042:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0049:  BSF    03.5
004A:  BCF    08.0
....................    lcd_rs_tris();
004B:  BCF    08.1
....................    lcd_rw_tris();
004C:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004D:  BCF    03.5
004E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0070:  MOVF   78,W
0071:  MOVWF  42
0072:  BTFSC  42.7
0073:  GOTO   04F
....................    lcd_output_rs(address);
0074:  BTFSS  40.0
0075:  BCF    08.1
0076:  BTFSC  40.0
0077:  BSF    08.1
....................    delay_cycles(1);
0078:  NOP
....................    lcd_output_rw(0);
0079:  BCF    08.2
....................    delay_cycles(1);
007A:  NOP
....................    lcd_output_enable(0);
007B:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
007C:  SWAPF  41,W
007D:  MOVWF  42
007E:  MOVLW  0F
007F:  ANDWF  42,F
0080:  MOVF   42,W
0081:  MOVWF  43
0082:  CALL   037
....................    lcd_send_nibble(n & 0xf);
0083:  MOVF   41,W
0084:  ANDLW  0F
0085:  MOVWF  42
0086:  MOVWF  43
0087:  CALL   037
0088:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0089:  MOVLW  28
008A:  MOVWF  2F
008B:  MOVLW  0C
008C:  MOVWF  30
008D:  MOVLW  01
008E:  MOVWF  31
008F:  MOVLW  06
0090:  MOVWF  32
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0091:  BCF    08.0
....................    lcd_output_rs(0);
0092:  BCF    08.1
....................    lcd_output_rw(0);
0093:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0094:  MOVLW  0F
0095:  BSF    03.5
0096:  ANDWF  08,W
0097:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0098:  BCF    08.0
....................    lcd_rs_tris();
0099:  BCF    08.1
....................    lcd_rw_tris();
009A:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
009B:  MOVLW  0F
009C:  BCF    03.5
009D:  MOVWF  3C
009E:  CALL   022
....................    for(i=1;i<=3;++i)
009F:  MOVLW  01
00A0:  MOVWF  2E
00A1:  MOVF   2E,W
00A2:  SUBLW  03
00A3:  BTFSS  03.0
00A4:  GOTO   0AD
....................    {
....................        lcd_send_nibble(3);
00A5:  MOVLW  03
00A6:  MOVWF  43
00A7:  CALL   037
....................        delay_ms(5);
00A8:  MOVLW  05
00A9:  MOVWF  3C
00AA:  CALL   022
00AB:  INCF   2E,F
00AC:  GOTO   0A1
....................    }
....................    
....................    lcd_send_nibble(2);
00AD:  MOVLW  02
00AE:  MOVWF  43
00AF:  CALL   037
....................    delay_ms(5);
00B0:  MOVLW  05
00B1:  MOVWF  3C
00B2:  CALL   022
....................    for(i=0;i<=3;++i)
00B3:  CLRF   2E
00B4:  MOVF   2E,W
00B5:  SUBLW  03
00B6:  BTFSS  03.0
00B7:  GOTO   0C4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B8:  MOVLW  2F
00B9:  ADDWF  2E,W
00BA:  MOVWF  04
00BB:  BCF    03.7
00BC:  MOVF   00,W
00BD:  MOVWF  33
00BE:  CLRF   40
00BF:  MOVF   33,W
00C0:  MOVWF  41
00C1:  CALL   049
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C2:  INCF   2E,F
00C3:  GOTO   0B4
00C4:  BCF    0A.3
00C5:  BCF    0A.4
00C6:  GOTO   3A0 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00C7:  DECFSZ 3D,W
00C8:  GOTO   0CA
00C9:  GOTO   0CD
....................       address=LCD_LINE_TWO;
00CA:  MOVLW  40
00CB:  MOVWF  3E
00CC:  GOTO   0CE
....................    else
....................       address=0;
00CD:  CLRF   3E
....................      
....................    address+=x-1;
00CE:  MOVLW  01
00CF:  SUBWF  3C,W
00D0:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address);
00D1:  MOVF   3E,W
00D2:  IORLW  80
00D3:  MOVWF  3F
00D4:  CLRF   40
00D5:  MOVF   3F,W
00D6:  MOVWF  41
00D7:  CALL   049
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00D8:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00D9:  MOVF   3B,W
00DA:  XORLW  07
00DB:  BTFSC  03.2
00DC:  GOTO   0E7
00DD:  XORLW  0B
00DE:  BTFSC  03.2
00DF:  GOTO   0EC
00E0:  XORLW  06
00E1:  BTFSC  03.2
00E2:  GOTO   0F4
00E3:  XORLW  02
00E4:  BTFSC  03.2
00E5:  GOTO   0FA
00E6:  GOTO   0FF
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00E7:  MOVLW  01
00E8:  MOVWF  3C
00E9:  MOVWF  3D
00EA:  CALL   0C7
00EB:  GOTO   104
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00EC:  CLRF   40
00ED:  MOVLW  01
00EE:  MOVWF  41
00EF:  CALL   049
....................                      delay_ms(2);
00F0:  MOVLW  02
00F1:  MOVWF  3C
00F2:  CALL   022
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00F3:  GOTO   104
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00F4:  MOVLW  01
00F5:  MOVWF  3C
00F6:  MOVLW  02
00F7:  MOVWF  3D
00F8:  CALL   0C7
00F9:  GOTO   104
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00FA:  CLRF   40
00FB:  MOVLW  10
00FC:  MOVWF  41
00FD:  CALL   049
00FE:  GOTO   104
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00FF:  MOVLW  01
0100:  MOVWF  40
0101:  MOVF   3B,W
0102:  MOVWF  41
0103:  CALL   049
....................      #endif
....................    }
0104:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
....................  
.................... #BYTE PORTA= 5    //Se especifica la ubicacion en memoria del puerto A
.................... //#BYTE PORTD= 8    //Se especifica la ubicacion en memoria del puerto D
....................  
.................... long V, I;        //Variable almacena los bits
.................... float Vm, Im;        //Almacena la temperatura
....................  
.................... void main(){
*
0373:  MOVF   03,W
0374:  ANDLW  1F
0375:  MOVWF  03
0376:  CLRF   2D
0377:  CLRF   2C
0378:  BSF    03.5
0379:  BSF    03.6
037A:  MOVF   09,W
037B:  ANDLW  C0
037C:  MOVWF  09
037D:  BCF    03.6
037E:  BCF    1F.4
037F:  BCF    1F.5
0380:  MOVLW  00
0381:  BSF    03.6
0382:  MOVWF  08
0383:  BCF    03.5
0384:  CLRF   07
0385:  CLRF   08
0386:  CLRF   09
0387:  BCF    03.7
....................    set_tris_a(0b00000011);          //Configuro los pines RA0 y RA1 como entrada
0388:  MOVLW  03
0389:  BSF    03.5
038A:  BCF    03.6
038B:  MOVWF  05
....................    //set_tris_d(0);                   //Pongo el PuertoD como Salida
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo
038C:  BSF    03.6
038D:  MOVF   09,W
038E:  ANDLW  C0
038F:  IORLW  1F
0390:  MOVWF  09
0391:  BCF    03.6
0392:  BCF    1F.4
0393:  BCF    1F.5
0394:  MOVLW  FF
0395:  BSF    03.6
0396:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion
0397:  BCF    03.5
0398:  BCF    03.6
0399:  BSF    1F.6
039A:  BSF    1F.7
039B:  BSF    03.5
039C:  BSF    1F.7
039D:  BCF    03.5
039E:  BSF    1F.0
....................    lcd_init();                      //Inicializo el LCD
039F:  GOTO   089
....................    lcd_putc("\f");                  //Borro el LCD
03A0:  MOVLW  04
03A1:  BSF    03.6
03A2:  MOVWF  0D
03A3:  MOVLW  00
03A4:  MOVWF  0F
03A5:  BCF    03.6
03A6:  CALL   105
....................    
....................    while(1)
....................    {
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0)
03A7:  MOVLW  00
03A8:  MOVWF  78
03A9:  MOVF   1F,W
03AA:  ANDLW  C3
03AB:  IORWF  78,W
03AC:  MOVWF  1F
....................        delay_us(50);                //Retardo de 50 us para leer la data
03AD:  MOVLW  10
03AE:  MOVWF  77
03AF:  DECFSZ 77,F
03B0:  GOTO   3AF
03B1:  NOP
....................        V=read_adc();                //Guardo en bits el voltaje leido por el canal 0
03B2:  BSF    1F.1
03B3:  BTFSC  1F.1
03B4:  GOTO   3B3
03B5:  MOVF   1E,W
03B6:  MOVWF  79
03B7:  BSF    03.5
03B8:  MOVF   1E,W
03B9:  MOVWF  78
03BA:  MOVF   79,W
03BB:  BCF    03.5
03BC:  MOVWF  21
03BD:  MOVF   78,W
03BE:  MOVWF  20
....................        
....................        set_adc_channel(1);          //Selecciono el canal 1 (RA1)
03BF:  MOVLW  04
03C0:  MOVWF  78
03C1:  MOVF   1F,W
03C2:  ANDLW  C3
03C3:  IORWF  78,W
03C4:  MOVWF  1F
....................        delay_us(50);                //Retardo de 50 us para leer la data
03C5:  MOVLW  10
03C6:  MOVWF  77
03C7:  DECFSZ 77,F
03C8:  GOTO   3C7
03C9:  NOP
....................        I=read_adc();                //Guardo en bits la corriente leida por el canal 1
03CA:  BSF    1F.1
03CB:  BTFSC  1F.1
03CC:  GOTO   3CB
03CD:  MOVF   1E,W
03CE:  MOVWF  79
03CF:  BSF    03.5
03D0:  MOVF   1E,W
03D1:  MOVWF  78
03D2:  MOVF   79,W
03D3:  BCF    03.5
03D4:  MOVWF  23
03D5:  MOVF   78,W
03D6:  MOVWF  22
....................        
....................        
....................        Vm = V*0.004882;                //Multiplico la cantidad de bits por la resolucion para obtener el voltaje medido
03D7:  MOVF   21,W
03D8:  MOVWF  2F
03D9:  MOVF   20,W
03DA:  MOVWF  2E
03DB:  CALL   15B
03DC:  MOVF   7A,W
03DD:  MOVWF  3E
03DE:  MOVF   79,W
03DF:  MOVWF  3D
03E0:  MOVF   78,W
03E1:  MOVWF  3C
03E2:  MOVF   77,W
03E3:  MOVWF  3B
03E4:  MOVLW  2F
03E5:  MOVWF  42
03E6:  MOVLW  F9
03E7:  MOVWF  41
03E8:  MOVLW  1F
03E9:  MOVWF  40
03EA:  MOVLW  77
03EB:  MOVWF  3F
03EC:  CALL   178
03ED:  MOVF   7A,W
03EE:  MOVWF  27
03EF:  MOVF   79,W
03F0:  MOVWF  26
03F1:  MOVF   78,W
03F2:  MOVWF  25
03F3:  MOVF   77,W
03F4:  MOVWF  24
....................        lcd_gotoxy(1,1);              //Ubiquese en la posicion 1,1
03F5:  MOVLW  01
03F6:  MOVWF  3C
03F7:  MOVWF  3D
03F8:  CALL   0C7
....................        lcd_putc("Voltaje Medido");
03F9:  MOVLW  05
03FA:  BSF    03.6
03FB:  MOVWF  0D
03FC:  MOVLW  00
03FD:  MOVWF  0F
03FE:  BCF    03.6
03FF:  CALL   105
....................        lcd_gotoxy(2,2);              //Ubiquese en la posicion 2,2
0400:  MOVLW  02
0401:  MOVWF  3C
0402:  MOVWF  3D
0403:  CALL   0C7
....................        printf(lcd_putc,"Es V= %f",Vm);  //Muestra el valor numerico de la conversionconversion
0404:  MOVLW  0D
0405:  BSF    03.6
0406:  MOVWF  0D
0407:  MOVLW  00
0408:  MOVWF  0F
0409:  BCF    03.0
040A:  MOVLW  06
040B:  BCF    03.6
040C:  MOVWF  2E
040D:  CALL   1ED
040E:  MOVLW  89
040F:  MOVWF  04
0410:  MOVF   27,W
0411:  MOVWF  31
0412:  MOVF   26,W
0413:  MOVWF  30
0414:  MOVF   25,W
0415:  MOVWF  2F
0416:  MOVF   24,W
0417:  MOVWF  2E
0418:  MOVLW  02
0419:  MOVWF  32
041A:  CALL   293
....................        delay_ms(500);  
041B:  MOVLW  02
041C:  MOVWF  2E
041D:  MOVLW  FA
041E:  MOVWF  3C
041F:  CALL   022
0420:  DECFSZ 2E,F
0421:  GOTO   41D
....................        
....................        lcd_putc("\f");              // Borramos LCD         
0422:  MOVLW  12
0423:  BSF    03.6
0424:  MOVWF  0D
0425:  MOVLW  00
0426:  MOVWF  0F
0427:  BCF    03.6
0428:  CALL   105
....................        
....................        Im = I*0.004882;                //Multiplico la cantidad de bits por la resolucion para obtener la corriente medida
0429:  MOVF   23,W
042A:  MOVWF  2F
042B:  MOVF   22,W
042C:  MOVWF  2E
042D:  CALL   15B
042E:  MOVF   7A,W
042F:  MOVWF  3E
0430:  MOVF   79,W
0431:  MOVWF  3D
0432:  MOVF   78,W
0433:  MOVWF  3C
0434:  MOVF   77,W
0435:  MOVWF  3B
0436:  MOVLW  2F
0437:  MOVWF  42
0438:  MOVLW  F9
0439:  MOVWF  41
043A:  MOVLW  1F
043B:  MOVWF  40
043C:  MOVLW  77
043D:  MOVWF  3F
043E:  CALL   178
043F:  MOVF   7A,W
0440:  MOVWF  2B
0441:  MOVF   79,W
0442:  MOVWF  2A
0443:  MOVF   78,W
0444:  MOVWF  29
0445:  MOVF   77,W
0446:  MOVWF  28
....................        lcd_gotoxy(1,1);              //Ubiquese en la posicion 1,1
0447:  MOVLW  01
0448:  MOVWF  3C
0449:  MOVWF  3D
044A:  CALL   0C7
....................        lcd_putc("Corriente Medida");
044B:  MOVLW  13
044C:  BSF    03.6
044D:  MOVWF  0D
044E:  MOVLW  00
044F:  MOVWF  0F
0450:  BCF    03.6
0451:  CALL   105
....................        lcd_gotoxy(2,2);              //Ubiquese en la posicion 2,2
0452:  MOVLW  02
0453:  MOVWF  3C
0454:  MOVWF  3D
0455:  CALL   0C7
....................        printf(lcd_putc,"Es I= %f",Im);  //Muestra el valor numerico de la conversionconversion
0456:  MOVLW  1C
0457:  BSF    03.6
0458:  MOVWF  0D
0459:  MOVLW  00
045A:  MOVWF  0F
045B:  BCF    03.0
045C:  MOVLW  06
045D:  BCF    03.6
045E:  MOVWF  2E
045F:  CALL   1ED
0460:  MOVLW  89
0461:  MOVWF  04
0462:  MOVF   2B,W
0463:  MOVWF  31
0464:  MOVF   2A,W
0465:  MOVWF  30
0466:  MOVF   29,W
0467:  MOVWF  2F
0468:  MOVF   28,W
0469:  MOVWF  2E
046A:  MOVLW  02
046B:  MOVWF  32
046C:  CALL   293
....................        delay_ms(500);
046D:  MOVLW  02
046E:  MOVWF  2E
046F:  MOVLW  FA
0470:  MOVWF  3C
0471:  CALL   022
0472:  DECFSZ 2E,F
0473:  GOTO   46F
....................        
....................        lcd_putc("\f");              // Borramos LCD
0474:  MOVLW  21
0475:  BSF    03.6
0476:  MOVWF  0D
0477:  MOVLW  00
0478:  MOVWF  0F
0479:  BCF    03.6
047A:  CALL   105
047B:  GOTO   3A7
....................    }
.................... }
047C:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
