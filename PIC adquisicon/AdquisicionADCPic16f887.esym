D G "__PCM__" 0 0 ""5.095d""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""11-Aug-20""
D G "__TIME__" 0 0 ""18:54:54""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 39 ""
v L "value" 1 39 "int8" `55 
f B "set_tris_a" 1 39 "void(int8 value)" `54 
f N "set_tris_b" 1 40 ""
v L "value" 1 40 "int8" `57 
f B "set_tris_b" 1 40 "void(int8 value)" `56 
f N "set_tris_c" 1 41 ""
v L "value" 1 41 "int8" `59 
f B "set_tris_c" 1 41 "void(int8 value)" `58 
f N "set_tris_d" 1 42 ""
v L "value" 1 42 "int8" `61 
f B "set_tris_d" 1 42 "void(int8 value)" `60 
f N "set_tris_e" 1 43 ""
v L "value" 1 43 "int8" `63 
f B "set_tris_e" 1 43 "void(int8 value)" `62 
f N "get_tris_a" 1 44 ""
f B "get_tris_a" 1 44 "int8()" `64 
f N "get_tris_b" 1 45 ""
f B "get_tris_b" 1 45 "int8()" `65 
f N "get_tris_c" 1 46 ""
f B "get_tris_c" 1 46 "int8()" `66 
f N "get_tris_d" 1 47 ""
f B "get_tris_d" 1 47 "int8()" `67 
f N "get_tris_e" 1 48 ""
f B "get_tris_e" 1 48 "int8()" `68 
f N "output_a" 1 49 ""
v L "value" 1 49 "int8" `70 
f B "output_a" 1 49 "void(int8 value)" `69 
f N "output_b" 1 50 ""
v L "value" 1 50 "int8" `72 
f B "output_b" 1 50 "void(int8 value)" `71 
f N "output_c" 1 51 ""
v L "value" 1 51 "int8" `74 
f B "output_c" 1 51 "void(int8 value)" `73 
f N "output_d" 1 52 ""
v L "value" 1 52 "int8" `76 
f B "output_d" 1 52 "void(int8 value)" `75 
f N "output_e" 1 53 ""
v L "value" 1 53 "int8" `78 
f B "output_e" 1 53 "void(int8 value)" `77 
f N "input_a" 1 54 ""
f B "input_a" 1 54 "int8()" `79 
f N "input_b" 1 55 ""
f B "input_b" 1 55 "int8()" `80 
f N "input_c" 1 56 ""
f B "input_c" 1 56 "int8()" `81 
f N "input_d" 1 57 ""
f B "input_d" 1 57 "int8()" `82 
f N "input_e" 1 58 ""
f B "input_e" 1 58 "int8()" `83 
f N "input_change_a" 1 59 ""
f B "input_change_a" 1 59 "int8()" `84 
f N "input_change_b" 1 60 ""
f B "input_change_b" 1 60 "int8()" `85 
f N "input_change_c" 1 61 ""
f B "input_change_c" 1 61 "int8()" `86 
f N "input_change_d" 1 62 ""
f B "input_change_d" 1 62 "int8()" `87 
f N "input_change_e" 1 63 ""
f B "input_change_e" 1 63 "int8()" `88 
f N "port_b_pullups" 1 64 ""
v L "upmask" 1 64 "int8" `90 
f B "port_b_pullups" 1 64 "void(int8 upmask)" `89 
f N "input" 1 65 ""
v L "pin" 1 65 "int16" `92 
f B "input" 1 65 "int8(int16 pin)" `91 
f N "input_state" 1 66 ""
v L "pin" 1 66 "int16" `94 
f B "input_state" 1 66 "int8(int16 pin)" `93 
f N "output_low" 1 67 ""
v L "pin" 1 67 "int16" `96 
f B "output_low" 1 67 "void(int16 pin)" `95 
f N "output_high" 1 68 ""
v L "pin" 1 68 "int16" `98 
f B "output_high" 1 68 "void(int16 pin)" `97 
f N "output_toggle" 1 69 ""
v L "pin" 1 69 "int16" `100 
f B "output_toggle" 1 69 "void(int16 pin)" `99 
f N "output_bit" 1 70 ""
v L "pin" 1 70 "int16" `102 
v L "level" 1 70 "int8" `103 
f B "output_bit" 1 70 "void(int16 pin,int8 level)" `101 
f N "output_float" 1 71 ""
v L "pin" 1 71 "int16" `105 
f B "output_float" 1 71 "void(int16 pin)" `104 
f N "output_drive" 1 72 ""
v L "pin" 1 72 "int16" `107 
f B "output_drive" 1 72 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 76 "40"
d G "PIN_A1" 1 77 "41"
d G "PIN_A2" 1 78 "42"
d G "PIN_A3" 1 79 "43"
d G "PIN_A4" 1 80 "44"
d G "PIN_A5" 1 81 "45"
d G "PIN_A6" 1 82 "46"
d G "PIN_A7" 1 83 "47"
d G "PIN_B0" 1 85 "48"
d G "PIN_B1" 1 86 "49"
d G "PIN_B2" 1 87 "50"
d G "PIN_B3" 1 88 "51"
d G "PIN_B4" 1 89 "52"
d G "PIN_B5" 1 90 "53"
d G "PIN_B6" 1 91 "54"
d G "PIN_B7" 1 92 "55"
d G "PIN_C0" 1 94 "56"
d G "PIN_C1" 1 95 "57"
d G "PIN_C2" 1 96 "58"
d G "PIN_C3" 1 97 "59"
d G "PIN_C4" 1 98 "60"
d G "PIN_C5" 1 99 "61"
d G "PIN_C6" 1 100 "62"
d G "PIN_C7" 1 101 "63"
d G "PIN_D0" 1 103 "64"
d G "PIN_D1" 1 104 "65"
d G "PIN_D2" 1 105 "66"
d G "PIN_D3" 1 106 "67"
d G "PIN_D4" 1 107 "68"
d G "PIN_D5" 1 108 "69"
d G "PIN_D6" 1 109 "70"
d G "PIN_D7" 1 110 "71"
d G "PIN_E0" 1 112 "72"
d G "PIN_E1" 1 113 "73"
d G "PIN_E2" 1 114 "74"
d G "PIN_E3" 1 115 "75"
d G "FALSE" 1 118 "0"
d G "TRUE" 1 119 "1"
d G "BYTE" 1 121 "int8"
d G "BOOLEAN" 1 122 "int1"
d G "getc" 1 124 "getch"
d G "fgetc" 1 125 "getch"
d G "getchar" 1 126 "getch"
d G "putc" 1 127 "putchar"
d G "fputc" 1 128 "putchar"
d G "fgets" 1 129 "gets"
d G "fputs" 1 130 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 135 ""
f B "restart_cause" 1 135 "int8()" `108 
f N "reset_cpu" 1 136 ""
f B "reset_cpu" 1 136 "void()" `109 
f N "sleep" 1 137 ""
f B "sleep" 1 137 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 139 "3"
d G "WDT_TIMEOUT" 1 140 "11"
d G "MCLR_FROM_SLEEP" 1 141 "19"
d G "MCLR_FROM_RUN" 1 142 "27"
d G "NORMAL_POWER_UP" 1 143 "25"
d G "BROWNOUT_RESTART" 1 144 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 151 ""
v L "mode" 1 151 "int8" `112 
f B "setup_timer_0" 1 151 "void(int8 mode)" `111 
f N "set_timer0" 1 152 ""
v L "value" 1 152 "int8" `114 
f B "set_timer0" 1 152 "void(int8 value)" `113 
f N "get_timer0" 1 153 ""
f B "get_timer0" 1 153 "int8()" `115 
f N "setup_counters" 1 154 ""
v L "mode" 1 154 "int8" `117 
v L "prescaler" 1 154 "int8" `118 
f B "setup_counters" 1 154 "void(int8 mode,int8 prescaler)" `116 
f N "set_rtcc" 1 155 ""
v L "value" 1 155 "int8" `120 
f B "set_rtcc" 1 155 "void(int8 value)" `119 
f N "get_rtcc" 1 156 ""
f B "get_rtcc" 1 156 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 158 "0"
d G "T0_EXT_L_TO_H" 1 159 "32"
d G "T0_EXT_H_TO_L" 1 160 "48"
d G "T0_DIV_1" 1 162 "8"
d G "T0_DIV_2" 1 163 "0"
d G "T0_DIV_4" 1 164 "1"
d G "T0_DIV_8" 1 165 "2"
d G "T0_DIV_16" 1 166 "3"
d G "T0_DIV_32" 1 167 "4"
d G "T0_DIV_64" 1 168 "5"
d G "T0_DIV_128" 1 169 "6"
d G "T0_DIV_256" 1 170 "7"
d G "T0_8_BIT" 1 173 "0"
d G "RTCC_INTERNAL" 1 177 "0"
d G "RTCC_EXT_L_TO_H" 1 178 "32"
d G "RTCC_EXT_H_TO_L" 1 179 "48"
d G "RTCC_DIV_1" 1 180 "8"
d G "RTCC_DIV_2" 1 181 "0"
d G "RTCC_DIV_4" 1 182 "1"
d G "RTCC_DIV_8" 1 183 "2"
d G "RTCC_DIV_16" 1 184 "3"
d G "RTCC_DIV_32" 1 185 "4"
d G "RTCC_DIV_64" 1 186 "5"
d G "RTCC_DIV_128" 1 187 "6"
d G "RTCC_DIV_256" 1 188 "7"
d G "RTCC_8_BIT" 1 189 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 200 ""
v L "mode" 1 200 "int16" `123 
f B "setup_wdt" 1 200 "void(int16 mode)" `122 
f N "restart_wdt" 1 201 ""
f B "restart_wdt" 1 201 "void()" `124  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 204 "8"
d G "WDT_36MS" 1 205 "9"
d G "WDT_72MS" 1 206 "10"
d G "WDT_144MS" 1 207 "11"
d G "WDT_288MS" 1 208 "12"
d G "WDT_576MS" 1 209 "13"
d G "WDT_1152MS" 1 210 "14"
d G "WDT_2304MS" 1 211 "15"
d G "WDT_ON" 1 216 "0x4000"
d G "WDT_OFF" 1 217 "0"
d G "WDT_DIV_16" 1 218 "0x100"
d G "WDT_DIV_8" 1 219 "0x300"
d G "WDT_DIV_4" 1 220 "0x500"
d G "WDT_DIV_2" 1 221 "0x700"
d G "WDT_TIMES_1" 1 222 "0x900" "Default"
d G "WDT_TIMES_2" 1 223 "0xB00"
d G "WDT_TIMES_4" 1 224 "0xD00"
d G "WDT_TIMES_8" 1 225 "0xF00"
d G "WDT_TIMES_16" 1 226 "0x1100"
d G "WDT_TIMES_32" 1 227 "0x1300"
d G "WDT_TIMES_64" 1 228 "0x1500"
d G "WDT_TIMES_128" 1 229 "0x1700"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 234 ""
v L "mode" 1 234 "int16" `126 
f B "setup_timer_1" 1 234 "void(int16 mode)" `125 
f N "get_timer1" 1 235 ""
f B "get_timer1" 1 235 "int16()" `127 
f N "set_timer1" 1 236 ""
v L "value" 1 236 "int16" `129 
f B "set_timer1" 1 236 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 239 "0"
d G "T1_INTERNAL" 1 240 "5"
d G "T1_EXTERNAL" 1 241 "7"
d G "T1_EXTERNAL_SYNC" 1 242 "3"
d G "T1_CLK_OUT" 1 244 "8"
d G "T1_DIV_BY_1" 1 246 "0"
d G "T1_DIV_BY_2" 1 247 "0x10"
d G "T1_DIV_BY_4" 1 248 "0x20"
d G "T1_DIV_BY_8" 1 249 "0x30"
d G "T1_GATE" 1 251 "0x40"
d G "T1_GATE_INVERTED" 1 252 "0xC0"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 257 ""
v L "mode" 1 257 "int8" `131 
v L "period" 1 257 "int8" `132 
v L "postscale" 1 257 "int8" `133 
f B "setup_timer_2" 1 257 "void(int8 mode,int8 period,int8 postscale)" `130 
f N "get_timer2" 1 258 ""
f B "get_timer2" 1 258 "int8()" `134 
f N "set_timer2" 1 259 ""
v L "value" 1 259 "int8" `136 
f B "set_timer2" 1 259 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 261 "0"
d G "T2_DIV_BY_1" 1 262 "4"
d G "T2_DIV_BY_4" 1 263 "5"
d G "T2_DIV_BY_16" 1 264 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 270 ""
v L "mode" 1 270 "int32" `138 
f B "setup_ccp1" 1 270 "void(int32 mode)" `137 
f N "setup_ccp1" 1 271 ""
v L "mode" 1 271 "int32" `140 
v L "pwm" 1 271 "int8" `141 
f B "setup_ccp1" 1 271 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 1 272 ""
v L "value" 1 272 "int8" `143 
f B "set_pwm1_duty" 1 272 "void(int8 value)" `142 
f N "set_pwm1_duty" 1 273 ""
v L "value" 1 273 "int16" `145 
f B "set_pwm1_duty" 1 273 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 275 "0"
d G "CCP_CAPTURE_FE" 1 276 "0x04"
d G "CCP_CAPTURE_RE" 1 277 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 278 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 279 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 280 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 281 "0x09"
d G "CCP_COMPARE_INT" 1 282 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 283 "0x0B"
d G "CCP_PWM" 1 284 "0x0C"
d G "CCP_PWM_PLUS_1" 1 285 "0x1c"
d G "CCP_PWM_PLUS_2" 1 286 "0x2c"
d G "CCP_PWM_PLUS_3" 1 287 "0x3c"
d G "CCP_PWM_H_H" 1 294 "0x0c"
d G "CCP_PWM_H_L" 1 295 "0x0d"
d G "CCP_PWM_L_H" 1 296 "0x0e"
d G "CCP_PWM_L_L" 1 297 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 299 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 300 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 301 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 303 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 304 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 305 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 306 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 307 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 308 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 309 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 311 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 312 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 313 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 315 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 316 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 317 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 319 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 321 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 322 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 323 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 324 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 325 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 328 ""
v L "mode" 1 328 "int32" `150 
f B "setup_ccp2" 1 328 "void(int32 mode)" `149 
f N "setup_ccp2" 1 329 ""
v L "mode" 1 329 "int32" `152 
v L "pwm" 1 329 "int8" `153 
f B "setup_ccp2" 1 329 "void(int32 mode,int8 pwm)" `151 
f N "set_pwm2_duty" 1 330 ""
v L "value" 1 330 "int8" `155 
f B "set_pwm2_duty" 1 330 "void(int8 value)" `154 
f N "set_pwm2_duty" 1 331 ""
v L "value" 1 331 "int16" `157 
f B "set_pwm2_duty" 1 331 "void(int16 value)" `156 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 339 ""
v L "mode" 1 339 "int32" `162 
f B "setup_spi" 1 339 "void(int32 mode)" `161 
f N "spi_write" 1 340 ""
v L "value" 1 340 "int8" `164 
f B "spi_write" 1 340 "void(int8 value)" `163 
f N "spi_write" 1 341 ""
v L "wait" 1 341 "int8" `166 
v L "value" 1 341 "int8" `167 
f B "spi_write" 1 341 "void(int8 wait,int8 value)" `165 
f N "spi_read" 1 342 ""
f B "spi_read" 1 342 "int8()" `168 
f N "spi_read" 1 343 ""
v L "value" 1 343 "int8" `170 
f B "spi_read" 1 343 "int8(int8 value)" `169 
f N "spi_data_is_in" 1 344 ""
f B "spi_data_is_in" 1 344 "int8()" `171  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 346 "0x00"
d G "SPI_MASTER" 1 347 "0x20"
d G "SPI_SLAVE" 1 348 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 349 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 350 "0x00"
d G "SPI_CLK_DIV_4" 1 351 "0x00"
d G "SPI_CLK_DIV_16" 1 352 "0x01"
d G "SPI_CLK_DIV_64" 1 353 "0x02"
d G "SPI_CLK_T2" 1 354 "0x03"
d G "SPI_SS_DISABLED" 1 355 "0x01"
d G "SPI_XMIT_L_TO_H" 1 357 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 358 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 360 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 361 "0x8000"
d G "SPI_L_TO_H" 1 364 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 365 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 369 ""
v L "baud" 1 369 "int32" `173 
f B "setup_uart" 1 369 "void(int32 baud)" `172 
f N "setup_uart" 1 370 ""
v L "baud" 1 370 "int32" `175 
v L "stream" 1 370 "int8" `176 
f B "setup_uart" 1 370 "void(int32 baud,int8 stream)" `174 
f N "setup_uart" 1 371 ""
v L "baud" 1 371 "int32" `178 
v L "stream" 1 371 "int8" `179 
v L "clock" 1 371 "int32" `180 
f B "setup_uart" 1 371 "void(int32 baud,int8 stream,int32 clock)" `177 
f N "set_uart_speed" 1 372 ""
v L "baud" 1 372 "int32" `182 
f B "set_uart_speed" 1 372 "void(int32 baud)" `181 
f N "set_uart_speed" 1 373 ""
v L "baud" 1 373 "int32" `184 
v L "stream" 1 373 "int8" `185 
f B "set_uart_speed" 1 373 "void(int32 baud,int8 stream)" `183 
f N "set_uart_speed" 1 374 ""
v L "baud" 1 374 "int32" `187 
v L "stream" 1 374 "int8" `188 
v L "clock" 1 374 "int32" `189 
f B "set_uart_speed" 1 374 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 378 "2"
d G "UART_DATA" 1 379 "4"
d G "UART_AUTODETECT" 1 380 "8"
d G "UART_AUTODETECT_NOWAIT" 1 381 "9"
d G "UART_WAKEUP_ON_RDA" 1 382 "10"
d G "UART_SEND_BREAK" 1 383 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 388 ""
v L "mode" 1 388 "int32" `191 
f B "setup_comparator" 1 388 "void(int32 mode)" `190  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 392 "0x00"
d G "NC_NC" 1 393 "0x00"
d G "CP1_A0_A3" 1 396 "0x00090080"
d G "CP1_A1_A3" 1 397 "0x000A0081"
d G "CP1_B3_A3" 1 398 "0x00880082"
d G "CP1_B1_A3" 1 399 "0x00280083"
d G "CP1_A0_VREF" 1 400 "0x00010084"
d G "CP1_A1_VREF" 1 401 "0x00020085"
d G "CP1_B3_VREF" 1 402 "0x00800086"
d G "CP1_B1_VREF" 1 403 "0x00200087"
d G "CP1_OUT_ON_A4" 1 405 "0x00000020"
d G "CP1_INVERT" 1 406 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 1 407 "0x20000000"
d G "CP2_A0_A2" 1 410 "0x00058000"
d G "CP2_A1_A2" 1 411 "0x00068100"
d G "CP2_B3_A2" 1 412 "0x00848200"
d G "CP2_B1_A2" 1 413 "0x00248300"
d G "CP2_A0_VREF" 1 414 "0x00018400"
d G "CP2_A1_VREF" 1 415 "0x00028500"
d G "CP2_B3_VREF" 1 416 "0x00808600"
d G "CP2_B1_VREF" 1 417 "0x00208700"
d G "CP2_OUT_ON_A5" 1 419 "0x00002000"
d G "CP2_INVERT" 1 420 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 1 421 "0x10000000"
d G "CP2_T1_SYNC" 1 424 "0x01000000"
d G "CP2_T1_GATE" 1 425 "0x02000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 433 ""
v L "mode" 1 433 "int8" `195 
f B "setup_vref" 1 433 "void(int8 mode)" `194  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 435 "0xa0"
d G "VREF_HIGH" 1 436 "0x80"
c L "setup_vref" 1 3 3 "FUNCTION"
f N "setup_oscillator" 1 442 ""
v L "mode" 1 442 "int8" `197 
f B "setup_oscillator" 1 442 "int8(int8 mode)" `196 
f N "setup_oscillator" 1 443 ""
v L "mode" 1 443 "int8" `199 
v L "tune" 1 443 "sint8" `200 
f B "setup_oscillator" 1 443 "int8(int8 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 445 "1"
d G "OSC_125KHZ" 1 446 "0x11"
d G "OSC_250KHZ" 1 447 "0x21"
d G "OSC_500KHZ" 1 448 "0x31"
d G "OSC_1MHZ" 1 449 "0x41"
d G "OSC_2MHZ" 1 450 "0x51"
d G "OSC_4MHZ" 1 451 "0x61"
d G "OSC_8MHZ" 1 452 "0x71"
d G "OSC_INTRC" 1 453 "1"
d G "OSC_NORMAL" 1 454 "0"
d G "OSC_STATE_STABLE" 1 458 "4"
d G "OSC_31KHZ_STABLE" 1 459 "2"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 466 ""
v L "mode" 1 466 "int16" `202 
f B "setup_adc" 1 466 "void(int16 mode)" `201 
f N "read_adc" 1 467 ""
f B "read_adc" 1 467 "int8()" `203 
f N "read_adc" 1 468 ""
v L "mode" 1 468 "int8" `205 
f B "read_adc" 1 468 "int8(int8 mode)" `204 
f N "read_adc" 1 469 ""
f G "read_adc" 1 469 "int16()" `206 
f N "read_adc" 1 470 ""
v L "mode" 1 470 "int8" `207 
f G "read_adc" 1 470 "int16(int8 mode)" `206 
f N "adc_done" 1 471 ""
f B "adc_done" 1 471 "int8(int8 mode)" `206  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 473 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 474 "0x100"
d G "ADC_CLOCK_DIV_8" 1 475 "0x40"
d G "ADC_CLOCK_DIV_32" 1 476 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 477 "0xc0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 480 ""
v L "pins" 1 480 "int32" `208 
f B "setup_adc_ports" 1 480 "void(int32 pins)" `207 
f N "setup_adc_ports" 1 481 ""
v L "pins" 1 481 "int32" `210 
v L "reference" 1 481 "int32" `211 
f B "setup_adc_ports" 1 481 "void(int32 pins,int32 reference)" `209 
f N "set_analog_pins" 1 482 ""
v L "pins" 1 482 "int32" `213 
f B "set_analog_pins" 1 482 "void(int32 pins)" `212 
f N "set_analog_pins" 1 483 ""
v L "pins" 1 483 "int32" `215 
v L "reference" 1 483 "int32" `216 
f B "set_analog_pins" 1 483 "void(int32 pins,int32 reference)" `214 
f N "set_adc_channel" 1 484 ""
v L "channel" 1 484 "int8" `218 
f B "set_adc_channel" 1 484 "void(int8 channel)" `217  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 488 "1" "| A0"
d G "sAN1" 1 489 "2" "| A1"
d G "sAN2" 1 490 "4" "| A2"
d G "sAN3" 1 491 "8" "| A3"
d G "sAN4" 1 492 "16" "| A5"
d G "sAN5" 1 493 "32" "| E0"
d G "sAN6" 1 494 "64" "| E1"
d G "sAN7" 1 495 "128" "| E2"
d G "sAN8" 1 496 "0x10000" "| B2"
d G "sAN9" 1 497 "0x20000" "| B3"
d G "sAN10" 1 498 "0x40000" "| B1"
d G "sAN11" 1 499 "0x80000" "| B4"
d G "sAN12" 1 500 "0x100000" "| B0"
d G "sAN13" 1 501 "0x200000" "| B5"
d G "NO_ANALOGS" 1 502 "0" "None"
d G "ALL_ANALOG" 1 503 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 506 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 507 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 1 508 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 1 509 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 512 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 513 "1"
d G "ADC_READ_ONLY" 1 514 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 520 ""
v L "x" 1 520 "sint8" `220 
f B "abs" 1 520 "sint8(sint8 x)" `219 
f N "abs" 1 521 ""
v L "x" 1 521 "sint16" `222 
f B "abs" 1 521 "sint16(sint16 x)" `221 
f N "abs" 1 522 ""
v L "x" 1 522 "sint32" `224 
f B "abs" 1 522 "sint32(sint32 x)" `223 
f N "abs" 1 523 ""
v L "x" 1 523 "float" `226 
f B "abs" 1 523 "float(float x)" `225 
f N "_mul" 1 524 ""
v L "??65535" 1 524 "int8" `228 
v L "??65535" 1 524 "int8" `229 
f B "_mul" 1 524 "int16(int8 ,int8 )" `227 
f N "_mul" 1 525 ""
v L "??65535" 1 525 "sint8" `231 
v L "??65535" 1 525 "sint8" `232 
f B "_mul" 1 525 "sint16(sint8 ,sint8 )" `230 
f N "_mul" 1 526 ""
v L "??65535" 1 526 "int16" `234 
v L "??65535" 1 526 "int16" `235 
f B "_mul" 1 526 "int32(int16 ,int16 )" `233 
f N "_mul" 1 527 ""
v L "??65535" 1 527 "sint16" `237 
v L "??65535" 1 527 "sint16" `238 
f B "_mul" 1 527 "sint32(sint16 ,sint16 )" `236  "Memory Manipulation Prototypes:"
f N "read_bank" 1 530 ""
v L "bank" 1 530 "int8" `240 
v L "offset" 1 530 "int8" `241 
f B "read_bank" 1 530 "int8(int8 bank,int8 offset)" `239 
f N "write_bank" 1 531 ""
v L "bank" 1 531 "int8" `243 
v L "offset" 1 531 "int8" `244 
v L "value" 1 531 "int8" `245 
f B "write_bank" 1 531 "void(int8 bank,int8 offset,int8 value)" `242 
f N "strcpy" 1 532 ""
v L "dest" 1 532 "*int8" `247 
v L "src" 1 532 "*int8" `248 
f B "strcpy" 1 532 "void(*int8 dest,*int8 src)" `246 
f N "memset" 1 533 ""
v L "destination" 1 533 "*int8" `250 
v L "value" 1 533 "int8" `251 
v L "num" 1 533 "int16" `252 
f B "memset" 1 533 "void(*int8 destination,int8 value,int16 num)" `249 
f N "memcpy" 1 534 ""
v L "destination" 1 534 "*int8" `254 
v L "source" 1 534 "*int8" `255 
v L "num" 1 534 "int16" `256 
f B "memcpy" 1 534 "void(*int8 destination,*int8 source,int16 num)" `253  "String Prototypes:"
f N "toupper" 1 537 ""
v L "cvalue" 1 537 "int8" `258 
f B "toupper" 1 537 "int8(int8 cvalue)" `257 
f N "tolower" 1 538 ""
v L "cvalue" 1 538 "int8" `260 
f B "tolower" 1 538 "int8(int8 cvalue)" `259 
f N "sprintf" 1 539 ""
v L "string" 1 539 "*int8" `262 
v L "cstring" 1 539 "*int8" `263 
f B "sprintf" 1 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `261  "Data Manipulators Prototypes:"
f N "shift_left" 1 542 ""
v L "address" 1 542 "*int8" `266 
v L "bytes" 1 542 "int8" `267 
v L "value" 1 542 "int8" `268 
f B "shift_left" 1 542 "int8(*int8 address,int8 bytes,int8 value)" `265 
f N "shift_right" 1 543 ""
v L "address" 1 543 "*int8" `270 
v L "bytes" 1 543 "int8" `271 
v L "value" 1 543 "int8" `272 
f B "shift_right" 1 543 "int8(*int8 address,int8 bytes,int8 value)" `269 
f N "rotate_left" 1 544 ""
v L "address" 1 544 "*int8" `274 
v L "bytes" 1 544 "int8" `275 
f B "rotate_left" 1 544 "void(*int8 address,int8 bytes)" `273 
f N "rotate_right" 1 545 ""
v L "address" 1 545 "*int8" `277 
v L "bytes" 1 545 "int8" `278 
f B "rotate_right" 1 545 "void(*int8 address,int8 bytes)" `276 
f N "swap" 1 546 ""
v L "value" 1 546 "int8" `280 
f B "swap" 1 546 "void(int8 value)" `279 
f N "make8" 1 547 ""
v L "var" 1 547 "int16" `282 
v L "offset" 1 547 "int8" `283 
f B "make8" 1 547 "int8(int16 var,int8 offset)" `281 
f N "make8" 1 548 ""
v L "var" 1 548 "int32" `285 
v L "offset" 1 548 "int8" `286 
f B "make8" 1 548 "int8(int32 var,int8 offset)" `284 
f N "make16" 1 549 ""
v L "varhigh" 1 549 "int8" `288 
v L "varlow" 1 549 "int8" `289 
f B "make16" 1 549 "int16(int8 varhigh,int8 varlow)" `287 
f N "make32" 1 550 ""
v L "var1" 1 550 "int16" `291 
f B "make32" 1 550 "int32(int16 var1)" `290 
f N "make32" 1 551 ""
v L "var1" 1 551 "int16" `293 
v L "var2" 1 551 "int16" `294 
f B "make32" 1 551 "int32(int16 var1,int16 var2)" `292 
f N "make32" 1 552 ""
v L "var1" 1 552 "int16" `296 
v L "var2" 1 552 "int8" `297 
f B "make32" 1 552 "int32(int16 var1,int8 var2)" `295 
f N "make32" 1 553 ""
v L "var1" 1 553 "int16" `299 
v L "var2" 1 553 "int8" `300 
v L "var3" 1 553 "int8" `301 
f B "make32" 1 553 "int32(int16 var1,int8 var2,int8 var3)" `298 
f N "make32" 1 554 ""
v L "var1" 1 554 "int8" `303 
f B "make32" 1 554 "int32(int8 var1)" `302 
f N "make32" 1 555 ""
v L "var1" 1 555 "int8" `305 
v L "var2" 1 555 "int8" `306 
f B "make32" 1 555 "int32(int8 var1,int8 var2)" `304 
f N "make32" 1 556 ""
v L "var1" 1 556 "int8" `308 
v L "var2" 1 556 "int8" `309 
v L "var3" 1 556 "int8" `310 
f B "make32" 1 556 "int32(int8 var1,int8 var2,int8 var3)" `307 
f N "make32" 1 557 ""
v L "var1" 1 557 "int8" `312 
v L "var2" 1 557 "int8" `313 
v L "var3" 1 557 "int8" `314 
v L "var4" 1 557 "int8" `315 
f B "make32" 1 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `311 
f N "make32" 1 558 ""
v L "var1" 1 558 "int8" `317 
v L "var2" 1 558 "int16" `318 
f B "make32" 1 558 "int32(int8 var1,int16 var2)" `316 
f N "make32" 1 559 ""
v L "var1" 1 559 "int8" `320 
v L "var2" 1 559 "int16" `321 
v L "var3" 1 559 "int8" `322 
f B "make32" 1 559 "int32(int8 var1,int16 var2,int8 var3)" `319 
f N "make32" 1 560 ""
v L "var1" 1 560 "int8" `324 
v L "var2" 1 560 "int8" `325 
v L "var3" 1 560 "int16" `326 
f B "make32" 1 560 "int32(int8 var1,int8 var2,int16 var3)" `323 
f N "bit_set" 1 561 ""
v L "var" 1 561 "int8" `328 
v L "bit" 1 561 "int8" `329 
f B "bit_set" 1 561 "void(int8 var,int8 bit)" `327 
f N "bit_set" 1 562 ""
v L "var" 1 562 "int16" `331 
v L "bit" 1 562 "int8" `332 
f B "bit_set" 1 562 "void(int16 var,int8 bit)" `330 
f N "bit_set" 1 563 ""
v L "var" 1 563 "int32" `334 
v L "bit" 1 563 "int8" `335 
f B "bit_set" 1 563 "void(int32 var,int8 bit)" `333 
f N "bit_clear" 1 564 ""
v L "var" 1 564 "int8" `337 
v L "bit" 1 564 "int8" `338 
f B "bit_clear" 1 564 "void(int8 var,int8 bit)" `336 
f N "bit_clear" 1 565 ""
v L "var" 1 565 "int16" `340 
v L "bit" 1 565 "int8" `341 
f B "bit_clear" 1 565 "void(int16 var,int8 bit)" `339 
f N "bit_clear" 1 566 ""
v L "var" 1 566 "int32" `343 
v L "bit" 1 566 "int8" `344 
f B "bit_clear" 1 566 "void(int32 var,int8 bit)" `342 
f N "bit_test" 1 567 ""
v L "var" 1 567 "int8" `346 
v L "bit" 1 567 "int8" `347 
f B "bit_test" 1 567 "int8(int8 var,int8 bit)" `345 
f N "bit_test" 1 568 ""
v L "var" 1 568 "int16" `349 
v L "bit" 1 568 "int8" `350 
f B "bit_test" 1 568 "int8(int16 var,int8 bit)" `348 
f N "bit_test" 1 569 ""
v L "var" 1 569 "int32" `352 
v L "bit" 1 569 "int8" `353 
f B "bit_test" 1 569 "int8(int32 var,int8 bit)" `351  "#use delay() Prototypes:"
f N "delay_cycles" 1 572 ""
v L "count" 1 572 "int8" `355 
f B "delay_cycles" 1 572 "void(int8 count)" `354 
f N "delay_ms" 1 573 ""
v L "time" 1 573 "int16" `357 
f B "delay_ms" 1 573 "void(int16 time)" `356 
f N "delay_us" 1 574 ""
v L "time" 1 574 "int16" `359 
f B "delay_us" 1 574 "void(int16 time)" `358  "#use rs232() Prototypes:"
f N "putchar" 1 577 ""
v L "cdata" 1 577 "int8" `361 
f B "putchar" 1 577 "void(int8 cdata)" `360 
f N "putchar" 1 578 ""
v L "cdata" 1 578 "int8" `363 
v L "stream" 1 578 "int8" `364 
f B "putchar" 1 578 "void(int8 cdata,int8 stream)" `362 
f N "puts" 1 579 ""
v L "string" 1 579 "*int8" `366 
f B "puts" 1 579 "void(*int8 string)" `365 
f N "puts" 1 580 ""
v L "string" 1 580 "*int8" `368 
v L "stream" 1 580 "int8" `369 
f B "puts" 1 580 "void(*int8 string,int8 stream)" `367 
f N "getch" 1 581 ""
f B "getch" 1 581 "int8()" `370 
f N "getch" 1 582 ""
v L "stream" 1 582 "int8" `372 
f B "getch" 1 582 "int8(int8 stream)" `371 
f N "gets" 1 583 ""
v L "string" 1 583 "*int8" `374 
f B "gets" 1 583 "void(*int8 string)" `373 
f N "gets" 1 584 ""
v L "string" 1 584 "*int8" `376 
v L "stream" 1 584 "int8" `377 
f B "gets" 1 584 "void(*int8 string,int8 stream)" `375 
f N "kbhit" 1 585 ""
f B "kbhit" 1 585 "int8()" `378 
f N "kbhit" 1 586 ""
v L "stream" 1 586 "int8" `380 
f B "kbhit" 1 586 "int8(int8 stream)" `379 
f N "printf" 1 587 ""
v L "string" 1 587 "*int8" `382 
f B "printf" 1 587 "void(*int8 string,*int8 _VA_LIST)" `381 
f N "fprintf" 1 588 ""
v L "stream" 1 588 "int8" `385 
v L "string" 1 588 "*int8" `386 
f B "fprintf" 1 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `384 
f N "putc_send" 1 589 ""
f B "putc_send" 1 589 "void()" `388 
f N "fputc_send" 1 590 ""
v L "stream" 1 590 "int8" `390 
f B "fputc_send" 1 590 "void(int8 stream)" `389 
f N "rcv_buffer_full" 1 591 ""
f B "rcv_buffer_full" 1 591 "int8()" `391 
f N "rcv_buffer_full" 1 592 ""
v L "stream" 1 592 "int8" `393 
f B "rcv_buffer_full" 1 592 "int8(int8 stream)" `392 
f N "rcv_buffer_bytes" 1 593 ""
f B "rcv_buffer_bytes" 1 593 "int16()" `394 
f N "rcv_buffer_bytes" 1 594 ""
v L "stream" 1 594 "int8" `396 
f B "rcv_buffer_bytes" 1 594 "int16(int8 stream)" `395 
f N "tx_buffer_full" 1 595 ""
f B "tx_buffer_full" 1 595 "int8()" `397 
f N "tx_buffer_full" 1 596 ""
v L "stream" 1 596 "int8" `399 
f B "tx_buffer_full" 1 596 "int8(int8 stream)" `398 
f N "tx_buffer_bytes" 1 597 ""
f B "tx_buffer_bytes" 1 597 "int16()" `400 
f N "tx_buffer_bytes" 1 598 ""
v L "stream" 1 598 "int8" `402 
f B "tx_buffer_bytes" 1 598 "int16(int8 stream)" `401  "#use i2c() Prototypes:"
f N "i2c_read" 1 601 ""
f B "i2c_read" 1 601 "int8()" `403 
f N "i2c_read" 1 602 ""
v L "ack" 1 602 "int8" `405 
f B "i2c_read" 1 602 "int8(int8 ack)" `404 
f N "i2c_read" 1 603 ""
v L "stream" 1 603 "int8" `407 
v L "ack" 1 603 "int8" `408 
f B "i2c_read" 1 603 "int8(int8 stream,int8 ack)" `406 
f N "i2c_write" 1 604 ""
v L "data" 1 604 "int8" `410 
f B "i2c_write" 1 604 "int8(int8 data)" `409 
f N "i2c_write" 1 605 ""
v L "stream" 1 605 "int8" `412 
v L "data" 1 605 "int8" `413 
f B "i2c_write" 1 605 "int8(int8 stream,int8 data)" `411 
f N "i2c_start" 1 606 ""
f B "i2c_start" 1 606 "void()" `414 
f N "i2c_start" 1 607 ""
v L "stream" 1 607 "int8" `416 
f B "i2c_start" 1 607 "void(int8 stream)" `415 
f N "i2c_start" 1 608 ""
v L "stream" 1 608 "int8" `418 
v L "restart" 1 608 "int8" `419 
f B "i2c_start" 1 608 "void(int8 stream,int8 restart)" `417 
f N "i2c_stop" 1 609 ""
f B "i2c_stop" 1 609 "void()" `420 
f N "i2c_stop" 1 610 ""
v L "stream" 1 610 "int8" `422 
f B "i2c_stop" 1 610 "void(int8 stream)" `421 
f N "i2c_isr_state" 1 611 ""
f B "i2c_isr_state" 1 611 "int8()" `423 
f N "i2c_slaveaddr" 1 612 ""
v L "addr" 1 612 "int8" `425 
f B "i2c_slaveaddr" 1 612 "void(int8 addr)" `424 
f N "i2c_slaveaddr" 1 613 ""
v L "stream" 1 613 "int8" `427 
v L "addr" 1 613 "int8" `428 
f B "i2c_slaveaddr" 1 613 "void(int8 stream,int8 addr)" `426 
f N "i2c_poll" 1 614 ""
f B "i2c_poll" 1 614 "int8()" `429 
f N "i2c_poll" 1 615 ""
v L "stream" 1 615 "int8" `431 
f B "i2c_poll" 1 615 "int8(int8 stream)" `430 
f N "i2c_init" 1 616 ""
v L "baud" 1 616 "int32" `433 
f B "i2c_init" 1 616 "void(int32 baud)" `432 
f N "i2c_init" 1 617 ""
v L "stream" 1 617 "int8" `435 
v L "baud" 1 617 "int32" `436 
f B "i2c_init" 1 617 "void(int8 stream,int32 baud)" `434 
f N "i2c_transfer" 1 618 ""
v L "address" 1 618 "int8" `438 
v L "wData" 1 618 "*int8" `439 
v L "wCount" 1 618 "int8" `440 
f B "i2c_transfer" 1 618 "int8(int8 address,*int8 wData,int8 wCount)" `437 
f N "i2c_transfer" 1 619 ""
v L "address" 1 619 "int8" `442 
v L "wData" 1 619 "*int8" `443 
v L "wCount" 1 619 "int8" `444 
v L "rData" 1 619 "*int8" `445 
v L "rCount" 1 619 "*int8" `446 
f B "i2c_transfer" 1 619 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `441 
f N "i2c_transfer" 1 620 ""
v L "stream" 1 620 "int8" `448 
v L "address" 1 620 "int8" `449 
v L "wData" 1 620 "*int8" `450 
v L "wCount" 1 620 "int8" `451 
f B "i2c_transfer" 1 620 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `447 
f N "i2c_transfer" 1 621 ""
v L "stream" 1 621 "int8" `453 
v L "address" 1 621 "int8" `454 
v L "wData" 1 621 "*int8" `455 
v L "wCount" 1 621 "int8" `456 
v L "rData" 1 621 "*int8" `457 
v L "rCount" 1 621 "*int8" `458 
f B "i2c_transfer" 1 621 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `452 
f N "i2c_transfer_out" 1 622 ""
v L "address" 1 622 "int8" `460 
v L "wData" 1 622 "*int8" `461 
v L "wCount" 1 622 "int8" `462 
f B "i2c_transfer_out" 1 622 "int8(int8 address,*int8 wData,int8 wCount)" `459 
f N "i2c_transfer_out" 1 623 ""
v L "stream" 1 623 "int8" `464 
v L "address" 1 623 "int8" `465 
v L "wData" 1 623 "*int8" `466 
v L "wCount" 1 623 "int8" `467 
f B "i2c_transfer_out" 1 623 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `463 
f N "i2c_transfer_in" 1 624 ""
v L "address" 1 624 "int8" `469 
v L "rData" 1 624 "*int8" `470 
v L "rCount" 1 624 "int8" `471 
f B "i2c_transfer_in" 1 624 "int8(int8 address,*int8 rData,int8 rCount)" `468 
f N "i2c_transfer_in" 1 625 ""
v L "stream" 1 625 "int8" `473 
v L "address" 1 625 "int8" `474 
v L "rData" 1 625 "*int8" `475 
v L "rCount" 1 625 "int8" `476 
f B "i2c_transfer_in" 1 625 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `472  "#use spi() Prototypes:"
f N "spi_xfer" 1 628 ""
f B "spi_xfer" 1 628 "int8()" `477 
f N "spi_xfer" 1 629 ""
f G "spi_xfer" 1 629 "int16()" `478 
f N "spi_xfer" 1 630 ""
f G "spi_xfer" 1 630 "int32()" `478 
f N "spi_xfer" 1 631 ""
v L "data" 1 631 "int8" `479 
f B "spi_xfer" 1 631 "int8(int8 data)" `478 
f N "spi_xfer" 1 632 ""
v L "data" 1 632 "int16" `481 
f B "spi_xfer" 1 632 "int16(int16 data)" `480 
f N "spi_xfer" 1 633 ""
v L "data" 1 633 "int32" `483 
f B "spi_xfer" 1 633 "int32(int32 data)" `482 
f N "spi_xfer" 1 634 ""
v L "stream" 1 634 "int8" `485 
v L "data" 1 634 "int8" `486 
f B "spi_xfer" 1 634 "int8(int8 stream,int8 data)" `484 
f N "spi_xfer" 1 635 ""
v L "stream" 1 635 "int8" `488 
v L "data" 1 635 "int16" `489 
f B "spi_xfer" 1 635 "int16(int8 stream,int16 data)" `487 
f N "spi_xfer" 1 636 ""
v L "stream" 1 636 "int8" `491 
v L "data" 1 636 "int32" `492 
f B "spi_xfer" 1 636 "int32(int8 stream,int32 data)" `490 
f N "spi_xfer" 1 637 ""
v L "stream" 1 637 "int8" `494 
v L "data" 1 637 "int8" `495 
v L "bits" 1 637 "int8" `496 
f B "spi_xfer" 1 637 "int8(int8 stream,int8 data,int8 bits)" `493 
f N "spi_xfer" 1 638 ""
v L "stream" 1 638 "int8" `498 
v L "data" 1 638 "int16" `499 
v L "bits" 1 638 "int8" `500 
f B "spi_xfer" 1 638 "int16(int8 stream,int16 data,int8 bits)" `497 
f N "spi_xfer" 1 639 ""
v L "stream" 1 639 "int8" `502 
v L "data" 1 639 "int32" `503 
v L "bits" 1 639 "int8" `504 
f B "spi_xfer" 1 639 "int32(int8 stream,int32 data,int8 bits)" `501 
f N "spi_init" 1 640 ""
v L "baud" 1 640 "int32" `506 
f B "spi_init" 1 640 "void(int32 baud)" `505 
f N "spi_init" 1 641 ""
v L "stream" 1 641 "int8" `508 
v L "baud" 1 641 "int32" `509 
f B "spi_init" 1 641 "void(int8 stream,int32 baud)" `507 
f N "spi_speed" 1 642 ""
v L "baud" 1 642 "int32" `511 
f B "spi_speed" 1 642 "void(int32 baud)" `510 
f N "spi_speed" 1 643 ""
v L "stream" 1 643 "int8" `513 
v L "baud" 1 643 "int32" `514 
f B "spi_speed" 1 643 "void(int8 stream,int32 baud)" `512 
f N "spi_speed" 1 644 ""
v L "stream" 1 644 "int8" `516 
v L "baud" 1 644 "int32" `517 
v L "clock" 1 644 "int32" `518 
f B "spi_speed" 1 644 "void(int8 stream,int32 baud,int32 clock)" `515 
f N "spi_prewrite" 1 645 ""
v L "data" 1 645 "int8" `520 
f B "spi_prewrite" 1 645 "void(int8 data)" `519 
f N "spi_prewrite" 1 646 ""
v L "data" 1 646 "int16" `522 
f B "spi_prewrite" 1 646 "void(int16 data)" `521 
f N "spi_prewrite" 1 647 ""
v L "data" 1 647 "int32" `524 
f B "spi_prewrite" 1 647 "void(int32 data)" `523 
f N "spi_prewrite" 1 648 ""
v L "??65535" 1 648 "int8" `526 
v L "data" 1 648 "int8" `527 
f B "spi_prewrite" 1 648 "void(int8 ,int8 data)" `525 
f N "spi_prewrite" 1 649 ""
v L "??65535" 1 649 "int8" `529 
v L "data" 1 649 "int16" `530 
f B "spi_prewrite" 1 649 "void(int8 ,int16 data)" `528 
f N "spi_prewrite" 1 650 ""
v L "??65535" 1 650 "int8" `532 
v L "data" 1 650 "int32" `533 
f B "spi_prewrite" 1 650 "void(int8 ,int32 data)" `531 
f N "spi_xfer_in" 1 651 ""
f B "spi_xfer_in" 1 651 "int8()" `534 
f N "spi_xfer_in" 1 652 ""
f G "spi_xfer_in" 1 652 "int16()" `535 
f N "spi_xfer_in" 1 653 ""
f G "spi_xfer_in" 1 653 "int32()" `535 
f N "spi_xfer_in" 1 654 ""
v L "bits" 1 654 "int8" `536 
f B "spi_xfer_in" 1 654 "int8(int8 bits)" `535 
f N "spi_xfer_in" 1 655 ""
v L "bits" 1 655 "int8" `538 
f G "spi_xfer_in" 1 655 "int16(int8 bits)" `537 
f N "spi_xfer_in" 1 656 ""
v L "bits" 1 656 "int8" `538 
f G "spi_xfer_in" 1 656 "int32(int8 bits)" `537 
f N "spi_xfer_in" 1 657 ""
v L "stream" 1 657 "int8" `538 
v L "bits" 1 657 "int8" `539 
f B "spi_xfer_in" 1 657 "int8(int8 stream,int8 bits)" `537 
f N "spi_xfer_in" 1 658 ""
v L "stream" 1 658 "int8" `538 
v L "bits" 1 658 "int8" `542 
f G "spi_xfer_in" 1 658 "int16(int8 stream,int8 bits)" `540 
f N "spi_xfer_in" 1 659 ""
v L "stream" 1 659 "int8" `538 
v L "bits" 1 659 "int8" `542 
f G "spi_xfer_in" 1 659 "int32(int8 stream,int8 bits)" `540 
f N "spi_transfer" 1 660 ""
v L "wData" 1 660 "*int8" `541 
v L "rData" 1 660 "*int8" `542 
v L "count" 1 660 "int16" `543 
f B "spi_transfer" 1 660 "void(*int8 wData,*int8 rData,int16 count)" `540 
f N "spi_transfer" 1 661 ""
v L "stream" 1 661 "int8" `545 
v L "wData" 1 661 "*int8" `546 
v L "rData" 1 661 "*int8" `547 
v L "count" 1 661 "int16" `548 
f B "spi_transfer" 1 661 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `544 
f N "spi_transfer_write" 1 662 ""
v L "wData" 1 662 "*int8" `550 
v L "count" 1 662 "int16" `551 
f B "spi_transfer_write" 1 662 "void(*int8 wData,int16 count)" `549 
f N "spi_transfer_write" 1 663 ""
v L "stream" 1 663 "int8" `553 
v L "wData" 1 663 "*int8" `554 
v L "count" 1 663 "int16" `555 
f B "spi_transfer_write" 1 663 "void(int8 stream,*int8 wData,int16 count)" `552 
f N "spi_transfer_read" 1 664 ""
v L "rData" 1 664 "*int8" `557 
v L "count" 1 664 "int16" `558 
f B "spi_transfer_read" 1 664 "void(*int8 rData,int16 count)" `556 
f N "spi_transfer_read" 1 665 ""
v L "stream" 1 665 "int8" `560 
v L "rData" 1 665 "*int8" `561 
v L "count" 1 665 "int16" `562 
f B "spi_transfer_read" 1 665 "void(int8 stream,*int8 rData,int16 count)" `559  "#use rtos() Prototypes:"
f N "rtos_run" 1 668 ""
f B "rtos_run" 1 668 "void()" `563 
f N "rtos_yield" 1 669 ""
f B "rtos_yield" 1 669 "void()" `564 
f N "rtos_enable" 1 670 ""
v L "task" 1 670 "int8" `566 
f B "rtos_enable" 1 670 "void(int8 task)" `565 
f N "rtos_disable" 1 671 ""
v L "task" 1 671 "int8" `568 
f B "rtos_disable" 1 671 "void(int8 task)" `567 
f N "rtos_terminate" 1 672 ""
f B "rtos_terminate" 1 672 "void()" `569 
f N "rtos_await" 1 673 ""
v L "flag" 1 673 "int8" `571 
f B "rtos_await" 1 673 "void(int8 flag)" `570 
f N "rtos_wait" 1 674 ""
v L "sem" 1 674 "int8" `573 
f B "rtos_wait" 1 674 "void(int8 sem)" `572 
f N "rtos_signal" 1 675 ""
v L "sem" 1 675 "int8" `575 
f B "rtos_signal" 1 675 "void(int8 sem)" `574 
f N "rtos_msg_send" 1 676 ""
v L "task" 1 676 "int8" `577 
v L "msg" 1 676 "int8" `578 
f B "rtos_msg_send" 1 676 "void(int8 task,int8 msg)" `576 
f N "rtos_msg_read" 1 677 ""
f B "rtos_msg_read" 1 677 "int8()" `579 
f N "rtos_msg_poll" 1 678 ""
f B "rtos_msg_poll" 1 678 "int8()" `580 
f N "rtos_overrun" 1 679 ""
v L "task" 1 679 "int8" `582 
f B "rtos_overrun" 1 679 "int8(int8 task)" `581 
f N "rtos_stats" 1 680 ""
v L "task" 1 680 "int8" `584 
v L "stat" 1 680 "*int8" `585 
f B "rtos_stats" 1 680 "void(int8 task,*int8 stat)" `583  "#use timer() Prototypes:"
f N "get_ticks" 1 683 ""
f B "get_ticks" 1 683 "int8()" `586 
f N "get_ticks" 1 684 ""
f G "get_ticks" 1 684 "int16()" `587 
f N "get_ticks" 1 685 ""
f G "get_ticks" 1 685 "int32()" `587 
f N "get_ticks" 1 686 ""
v L "stream" 1 686 "int8" `588 
f B "get_ticks" 1 686 "int8(int8 stream)" `587 
f N "get_ticks" 1 687 ""
v L "stream" 1 687 "int8" `590 
f G "get_ticks" 1 687 "int16(int8 stream)" `589 
f N "get_ticks" 1 688 ""
v L "stream" 1 688 "int8" `590 
f G "get_ticks" 1 688 "int32(int8 stream)" `589 
f N "set_ticks" 1 689 ""
v L "value" 1 689 "int8" `590 
f B "set_ticks" 1 689 "void(int8 value)" `589 
f N "set_ticks" 1 690 ""
v L "value" 1 690 "int16" `592 
f B "set_ticks" 1 690 "void(int16 value)" `591 
f N "set_ticks" 1 691 ""
v L "value" 1 691 "int32" `594 
f B "set_ticks" 1 691 "void(int32 value)" `593 
f N "set_ticks" 1 692 ""
v L "stream" 1 692 "int8" `596 
v L "value" 1 692 "int8" `597 
f B "set_ticks" 1 692 "void(int8 stream,int8 value)" `595 
f N "set_ticks" 1 693 ""
v L "stream" 1 693 "int8" `599 
v L "value" 1 693 "int16" `600 
f B "set_ticks" 1 693 "void(int8 stream,int16 value)" `598 
f N "set_ticks" 1 694 ""
v L "stream" 1 694 "int8" `602 
v L "value" 1 694 "int32" `603 
f B "set_ticks" 1 694 "void(int8 stream,int32 value)" `601  "#use pwm() Prototypes:"
f N "pwm_on" 1 697 ""
f B "pwm_on" 1 697 "void()" `604 
f N "pwm_on" 1 698 ""
v L "stream" 1 698 "int8" `606 
f B "pwm_on" 1 698 "void(int8 stream)" `605 
f N "pwm_off" 1 699 ""
f B "pwm_off" 1 699 "void()" `607 
f N "pwm_off" 1 700 ""
v L "stream" 1 700 "int8" `609 
f B "pwm_off" 1 700 "void(int8 stream)" `608 
f N "pwm_set_duty" 1 701 ""
v L "duty" 1 701 "int16" `611 
f B "pwm_set_duty" 1 701 "void(int16 duty)" `610 
f N "pwm_set_duty" 1 702 ""
v L "stream" 1 702 "int8" `613 
v L "duty" 1 702 "int16" `614 
f B "pwm_set_duty" 1 702 "void(int8 stream,int16 duty)" `612 
f N "pwm_set_duty_percent" 1 703 ""
v L "percent" 1 703 "int16" `616 
f B "pwm_set_duty_percent" 1 703 "void(int16 percent)" `615 
f N "pwm_set_duty_percent" 1 704 ""
v L "stream" 1 704 "int8" `618 
v L "percent" 1 704 "int16" `619 
f B "pwm_set_duty_percent" 1 704 "void(int8 stream,int16 percent)" `617 
f N "pwm_set_frequency" 1 705 ""
v L "frequency" 1 705 "int32" `621 
f B "pwm_set_frequency" 1 705 "void(int32 frequency)" `620 
f N "pwm_set_frequency" 1 706 ""
v L "stream" 1 706 "int8" `623 
v L "frequency" 1 706 "int32" `624 
f B "pwm_set_frequency" 1 706 "void(int8 stream,int32 frequency)" `622 
f N "pwm_get_duty_period" 1 707 ""
f B "pwm_get_duty_period" 1 707 "int16()" `625 
f N "pwm_get_duty_period" 1 708 ""
v L "stream" 1 708 "int8" `627 
f B "pwm_get_duty_period" 1 708 "int16(int8 stream)" `626  "#use capture() Prototypes:"
f N "get_capture_time" 1 711 ""
f B "get_capture_time" 1 711 "int16()" `628 
f N "get_capture_time" 1 712 ""
v L "stream" 1 712 "int8" `630 
f B "get_capture_time" 1 712 "int16(int8 stream)" `629 
f N "get_capture_event" 1 713 ""
f B "get_capture_event" 1 713 "int8()" `631 
f N "get_capture_event" 1 714 ""
v L "stream" 1 714 "int8" `633 
f B "get_capture_event" 1 714 "int8(int8 stream)" `632  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 727 ""
v L "address" 1 727 "int16" `635 
f B "goto_address" 1 727 "void(int16 address)" `634 
f N "label_address" 1 728 ""
v L "label" 1 728 "int16" `637 
f B "label_address" 1 728 "int16(int16 label)" `636  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 731 ""
v L "address" 1 731 "int16" `639 
v L "dataptr" 1 731 "*int8" `640 
v L "count" 1 731 "int16" `641 
f B "read_program_memory" 1 731 "void(int16 address,*int8 dataptr,int16 count)" `638 
f N "read_program_eeprom" 1 732 ""
v L "address" 1 732 "int16" `643 
f B "read_program_eeprom" 1 732 "int16(int16 address)" `642  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 1 735 ""
v L "address" 1 735 "int16" `645 
f B "erase_program_eeprom" 1 735 "void(int16 address)" `644 
f N "write_program_memory" 1 736 ""
v L "address" 1 736 "int16" `647 
v L "dataptr" 1 736 "*int8" `648 
v L "count" 1 736 "int16" `649 
f B "write_program_memory" 1 736 "void(int16 address,*int8 dataptr,int16 count)" `646 
f N "write_program_eeprom" 1 737 ""
v L "address" 1 737 "int16" `651 
v L "data" 1 737 "int16" `652 
f B "write_program_eeprom" 1 737 "void(int16 address,int16 data)" `650  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 744 "unsigned int8"
f N "read_eeprom" 1 747 ""
v L "address" 1 747 "int8" `654 
f B "read_eeprom" 1 747 "int8(int8 address)" `653 
f N "write_eeprom" 1 748 ""
v L "address" 1 748 "int8" `656 
v L "value" 1 748 "int8" `657 
f B "write_eeprom" 1 748 "void(int8 address,int8 value)" `655  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 755 ""
v L "interrupt" 1 755 "int32" `659 
f B "enable_interrupts" 1 755 "void(int32 interrupt)" `658 
f N "disable_interrupts" 1 756 ""
v L "interrupt" 1 756 "int32" `661 
f B "disable_interrupts" 1 756 "void(int32 interrupt)" `660 
f N "clear_interrupt" 1 757 ""
v L "interrupt" 1 757 "int32" `663 
f B "clear_interrupt" 1 757 "void(int32 interrupt)" `662 
f N "interrupt_active" 1 758 ""
v L "interrupt" 1 758 "int32" `665 
f B "interrupt_active" 1 758 "int8(int32 interrupt)" `664 
f N "interrupt_enabled" 1 759 ""
v L "interrupt" 1 759 "int32" `667 
f B "interrupt_enabled" 1 759 "int8(int32 interrupt)" `666 
f N "ext_int_edge" 1 760 ""
v L "source" 1 760 "int8" `669 
v L "edge" 1 760 "int8" `670 
f B "ext_int_edge" 1 760 "void(int8 source,int8 edge)" `668 
f N "jump_to_isr" 1 761 ""
v L "address" 1 761 "int16" `672 
f B "jump_to_isr" 1 761 "void(int16 address)" `671  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 763 "0x40"
d G "H_TO_L" 1 764 "0"
d G "GLOBAL" 1 766 "0x0BC0"
d G "PERIPH" 1 767 "0x0B40"
d G "INT_RTCC" 1 768 "0x000B20"
d G "INT_RB" 1 769 "0x01FF0B08"
d G "INT_EXT_L2H" 1 770 "0x50000B10"
d G "INT_EXT_H2L" 1 771 "0x60000B10"
d G "INT_EXT" 1 772 "0x000B10"
d G "INT_AD" 1 773 "0x008C40"
d G "INT_TBE" 1 774 "0x008C10"
d G "INT_RDA" 1 775 "0x008C20"
d G "INT_TIMER1" 1 776 "0x008C01"
d G "INT_TIMER2" 1 777 "0x008C02"
d G "INT_CCP1" 1 778 "0x008C04"
d G "INT_CCP2" 1 779 "0x008D01"
d G "INT_SSP" 1 780 "0x008C08"
d G "INT_BUSCOL" 1 781 "0x008D08"
d G "INT_EEPROM" 1 782 "0x008D10"
d G "INT_TIMER0" 1 783 "0x000B20"
d G "INT_OSC_FAIL" 1 784 "0x008D80"
d G "INT_COMP" 1 785 "0x008D20"
d G "INT_COMP2" 1 786 "0x008D40"
d G "INT_ULPWU" 1 787 "0x008D04"
d G "INT_RB0" 1 788 "0x1010B08"
d G "INT_RB1" 1 789 "0x1020B08"
d G "INT_RB2" 1 790 "0x1040B08"
d G "INT_RB3" 1 791 "0x1080B08"
d G "INT_RB4" 1 792 "0x1100B08"
d G "INT_RB5" 1 793 "0x1200B08"
d G "INT_RB6" 1 794 "0x1400B08"
d G "INT_RB7" 1 795 "0x1800B08"
C L "jump_to_isr" 0 3 1 "FUNCTION"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `683  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 109 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 2 110 "()   lcdtris.enable=0"
D G "lcd_output_rs" 2 117 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 2 118 "()   lcdtris.rs=0"
D G "lcd_output_rw" 2 125 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 2 126 "()   lcdtris.rw=0"
D G "LCD_DATA_PORT" 2 149 "getenv("SFR:PORTD")" "portd"
V G "lcd" 2 161 "LCD_PIN_MAP" `684 
V G "lcdlat" 2 161 "LCD_PIN_MAP" `685 
V G "lcdtris" 2 161 "LCD_PIN_MAP" `686 
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
F N "lcd_read_nibble" 2 190 ""
f G "lcd_read_nibble" 2 190 "int8()" `687 
F N "lcd_read_byte" 2 192 ""
F G "lcd_read_byte" 2 193 "int8()" `688 
V L "low" 2 194 "int8" `689 
V L "high" 2 194 "int8" `690 
F N "lcd_read_nibble" 2 239 ""
F G "lcd_read_nibble" 2 240 "int8()" `687 
F N "lcd_send_nibble" 2 256 ""
V L "n" 2 256 "int8" `692 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `691 
F N "lcd_send_byte" 2 274 ""
V L "address" 2 274 "int8" `694 
V L "n" 2 274 "int8" `695 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `693 
F N "lcd_init" 2 299 ""
F G "lcd_init" 2 300 "void()" `696 
V L "i" 2 301 "int8" `697 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `698 
C L "lcd_init" 2 2 2 "FUNCTION"
F N "lcd_gotoxy" 2 345 ""
V L "x" 2 345 "int8" `700 
V L "y" 2 345 "int8" `701 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `699 
V L "address" 2 347 "int8" `702 
F N "lcd_putc" 2 363 ""
V L "c" 2 363 "int8" `704 
F G "lcd_putc" 2 364 "void(int8 c)" `703 
F N "lcd_getc" 2 406 ""
V L "x" 2 406 "int8" `706 
V L "y" 2 406 "int8" `707 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `705 
V L "value" 2 408 "int8" `708 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 2 424 ""
V L "which" 2 424 "int8" `710 
V L "ptr" 2 424 "*int8" `711 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `709 
V L "i" 2 426 "int8" `712 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
F N "lcd_cursor_on" 2 443 ""
V L "on" 2 443 "int8" `714 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `713 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
V G "bits" 0 11 "int16" `717  "Variable almacena los bits"
V G "tem" 0 12 "float" `718  "Almacena la temperatura"
F N "MAIN" 0 14 ""
F G "MAIN" 0 14 "void()" `719 
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
