CCS PCM C Compiler, Version 5.095d, 1               11-Aug-20 18:54
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Usuario\OneDrive\Escritorio\USB\Verano 2020\Electiva de Electronica de Potencia\Proyecto 2\Simulaci-n-de-Paneles-PV-en-proteus\PIC adquisicon\AdquisicionADCPic16f887.lst

               ROM used:   1036 words (13%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           39 (11%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   369
0003:  NOP
.................... #INCLUDE <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 0C,00
0005:  DATA CC,20
0006:  DATA 20,2A
0007:  DATA C5,26
0008:  DATA D0,22
0009:  DATA D2,20
000A:  DATA D4,2A
000B:  DATA D2,20
000C:  DATA 00,01
000D:  DATA C5,29
000E:  DATA A0,21
000F:  DATA 3D,10
0010:  DATA 25,33
0011:  DATA 20,10
0012:  DATA 20,10
0013:  DATA 00,00
*
00F7:  MOVF   0B,W
00F8:  MOVWF  28
00F9:  BCF    0B.7
00FA:  BSF    03.5
00FB:  BSF    03.6
00FC:  BSF    0C.7
00FD:  BSF    0C.0
00FE:  NOP
00FF:  NOP
0100:  BCF    03.5
0101:  BCF    03.6
0102:  BTFSC  28.7
0103:  BSF    0B.7
0104:  BSF    03.6
0105:  MOVF   0C,W
0106:  ANDLW  7F
0107:  BTFSC  03.2
0108:  GOTO   14B
0109:  BCF    03.6
010A:  MOVWF  28
010B:  BSF    03.6
010C:  MOVF   0D,W
010D:  BCF    03.6
010E:  MOVWF  29
010F:  BSF    03.6
0110:  MOVF   0F,W
0111:  BCF    03.6
0112:  MOVWF  2A
0113:  MOVF   28,W
0114:  MOVWF  35
0115:  CALL   0CB
0116:  MOVF   29,W
0117:  BSF    03.6
0118:  MOVWF  0D
0119:  BCF    03.6
011A:  MOVF   2A,W
011B:  BSF    03.6
011C:  MOVWF  0F
011D:  BCF    03.6
011E:  MOVF   0B,W
011F:  MOVWF  2B
0120:  BCF    0B.7
0121:  BSF    03.5
0122:  BSF    03.6
0123:  BSF    0C.7
0124:  BSF    0C.0
0125:  NOP
0126:  NOP
0127:  BCF    03.5
0128:  BCF    03.6
0129:  BTFSC  2B.7
012A:  BSF    0B.7
012B:  BSF    03.6
012C:  RLF    0C,W
012D:  RLF    0E,W
012E:  ANDLW  7F
012F:  BTFSC  03.2
0130:  GOTO   14B
0131:  BCF    03.6
0132:  MOVWF  28
0133:  BSF    03.6
0134:  MOVF   0D,W
0135:  BCF    03.6
0136:  MOVWF  29
0137:  BSF    03.6
0138:  MOVF   0F,W
0139:  BCF    03.6
013A:  MOVWF  2A
013B:  MOVF   28,W
013C:  MOVWF  35
013D:  CALL   0CB
013E:  MOVF   29,W
013F:  BSF    03.6
0140:  MOVWF  0D
0141:  BCF    03.6
0142:  MOVF   2A,W
0143:  BSF    03.6
0144:  MOVWF  0F
0145:  INCF   0D,F
0146:  BTFSC  03.2
0147:  INCF   0F,F
0148:  BCF    03.6
0149:  GOTO   0F7
014A:  BSF    03.6
014B:  BCF    03.6
014C:  RETURN
014D:  MOVLW  8E
014E:  MOVWF  77
014F:  MOVF   29,W
0150:  MOVWF  78
0151:  MOVF   28,W
0152:  MOVWF  79
0153:  CLRF   7A
0154:  MOVF   78,F
0155:  BTFSS  03.2
0156:  GOTO   161
0157:  MOVF   79,W
0158:  MOVWF  78
0159:  CLRF   79
015A:  MOVLW  08
015B:  SUBWF  77,F
015C:  MOVF   78,F
015D:  BTFSS  03.2
015E:  GOTO   161
015F:  CLRF   77
0160:  GOTO   169
0161:  BCF    03.0
0162:  BTFSC  78.7
0163:  GOTO   168
0164:  RLF    79,F
0165:  RLF    78,F
0166:  DECF   77,F
0167:  GOTO   161
0168:  BCF    78.7
0169:  BCF    0A.3
016A:  BCF    0A.4
016B:  GOTO   3BA (RETURN)
016C:  MOVF   35,W
016D:  BTFSC  03.2
016E:  GOTO   1DC
016F:  MOVWF  3D
0170:  MOVF   39,W
0171:  BTFSC  03.2
0172:  GOTO   1DC
0173:  ADDWF  3D,F
0174:  BTFSC  03.0
0175:  GOTO   17D
0176:  MOVLW  7F
0177:  SUBWF  3D,F
0178:  BTFSS  03.0
0179:  GOTO   1DC
017A:  BTFSC  03.2
017B:  GOTO   1DC
017C:  GOTO   181
017D:  MOVLW  81
017E:  ADDWF  3D,F
017F:  BTFSC  03.0
0180:  GOTO   1DC
0181:  MOVF   3D,W
0182:  MOVWF  77
0183:  CLRF   78
0184:  CLRF   79
0185:  CLRF   7A
0186:  MOVF   36,W
0187:  MOVWF  41
0188:  BSF    41.7
0189:  MOVF   37,W
018A:  MOVWF  40
018B:  MOVF   38,W
018C:  MOVWF  3F
018D:  MOVLW  18
018E:  MOVWF  3D
018F:  CLRF   3E
0190:  BTFSS  3F.0
0191:  GOTO   1AA
0192:  MOVF   3C,W
0193:  ADDWF  7A,F
0194:  BTFSS  03.0
0195:  GOTO   19C
0196:  INCF   79,F
0197:  BTFSS  03.2
0198:  GOTO   19C
0199:  INCF   78,F
019A:  BTFSC  03.2
019B:  BSF    3E.7
019C:  MOVF   3B,W
019D:  ADDWF  79,F
019E:  BTFSS  03.0
019F:  GOTO   1A3
01A0:  INCF   78,F
01A1:  BTFSC  03.2
01A2:  BSF    3E.7
01A3:  MOVF   3A,W
01A4:  MOVWF  37
01A5:  BSF    37.7
01A6:  MOVF   37,W
01A7:  ADDWF  78,F
01A8:  BTFSC  03.0
01A9:  BSF    3E.7
01AA:  RLF    3E,F
01AB:  RRF    78,F
01AC:  RRF    79,F
01AD:  RRF    7A,F
01AE:  RRF    41,F
01AF:  RRF    40,F
01B0:  RRF    3F,F
01B1:  BCF    03.0
01B2:  DECFSZ 3D,F
01B3:  GOTO   18F
01B4:  MOVLW  01
01B5:  ADDWF  77,F
01B6:  BTFSC  03.0
01B7:  GOTO   1DC
01B8:  BTFSC  78.7
01B9:  GOTO   1C1
01BA:  RLF    41,F
01BB:  RLF    7A,F
01BC:  RLF    79,F
01BD:  RLF    78,F
01BE:  DECF   77,F
01BF:  BTFSC  03.2
01C0:  GOTO   1DC
01C1:  BTFSS  41.7
01C2:  GOTO   1D2
01C3:  INCF   7A,F
01C4:  BTFSS  03.2
01C5:  GOTO   1D2
01C6:  INCF   79,F
01C7:  BTFSS  03.2
01C8:  GOTO   1D2
01C9:  INCF   78,F
01CA:  BTFSS  03.2
01CB:  GOTO   1D2
01CC:  RRF    78,F
01CD:  RRF    79,F
01CE:  RRF    7A,F
01CF:  INCF   77,F
01D0:  BTFSC  03.2
01D1:  GOTO   1DC
01D2:  MOVF   36,W
01D3:  MOVWF  3E
01D4:  MOVF   3A,W
01D5:  XORWF  3E,F
01D6:  BTFSS  3E.7
01D7:  GOTO   1DA
01D8:  BSF    78.7
01D9:  GOTO   1E0
01DA:  BCF    78.7
01DB:  GOTO   1E0
01DC:  CLRF   77
01DD:  CLRF   78
01DE:  CLRF   79
01DF:  CLRF   7A
01E0:  RETURN
01E1:  MOVF   0B,W
01E2:  MOVWF  29
01E3:  BCF    0B.7
01E4:  BSF    03.5
01E5:  BSF    03.6
01E6:  BSF    0C.7
01E7:  BSF    0C.0
01E8:  NOP
01E9:  NOP
01EA:  BCF    03.5
01EB:  BCF    03.6
01EC:  BTFSC  29.7
01ED:  BSF    0B.7
01EE:  BTFSC  03.0
01EF:  GOTO   218
01F0:  BSF    03.6
01F1:  MOVF   0C,W
01F2:  ANDLW  7F
01F3:  BCF    03.6
01F4:  MOVWF  29
01F5:  BSF    03.6
01F6:  MOVF   0D,W
01F7:  BCF    03.6
01F8:  MOVWF  2A
01F9:  BSF    03.6
01FA:  MOVF   0F,W
01FB:  BCF    03.6
01FC:  MOVWF  2B
01FD:  MOVF   29,W
01FE:  MOVWF  35
01FF:  CALL   0CB
0200:  MOVF   2A,W
0201:  BSF    03.6
0202:  MOVWF  0D
0203:  BCF    03.6
0204:  MOVF   2B,W
0205:  BSF    03.6
0206:  MOVWF  0F
0207:  BCF    03.6
0208:  MOVF   0B,W
0209:  MOVWF  2C
020A:  BCF    0B.7
020B:  BSF    03.5
020C:  BSF    03.6
020D:  BSF    0C.7
020E:  BSF    0C.0
020F:  NOP
0210:  NOP
0211:  BCF    03.5
0212:  BCF    03.6
0213:  BTFSC  2C.7
0214:  BSF    0B.7
0215:  DECFSZ 28,F
0216:  GOTO   218
0217:  GOTO   237
0218:  BSF    03.6
0219:  RLF    0C,W
021A:  RLF    0E,W
021B:  ANDLW  7F
021C:  BCF    03.6
021D:  MOVWF  29
021E:  BSF    03.6
021F:  MOVF   0D,W
0220:  BCF    03.6
0221:  MOVWF  2A
0222:  BSF    03.6
0223:  MOVF   0F,W
0224:  BCF    03.6
0225:  MOVWF  2B
0226:  MOVF   29,W
0227:  MOVWF  35
0228:  CALL   0CB
0229:  MOVF   2A,W
022A:  BSF    03.6
022B:  MOVWF  0D
022C:  BCF    03.6
022D:  MOVF   2B,W
022E:  BSF    03.6
022F:  MOVWF  0F
0230:  INCF   0D,F
0231:  BTFSC  03.2
0232:  INCF   0F,F
0233:  BCF    03.0
0234:  BCF    03.6
0235:  DECFSZ 28,F
0236:  GOTO   1E1
0237:  RETURN
0238:  BTFSC  03.1
0239:  GOTO   23D
023A:  MOVLW  3D
023B:  MOVWF  04
023C:  BCF    03.7
023D:  CLRF   77
023E:  CLRF   78
023F:  CLRF   79
0240:  CLRF   7A
0241:  CLRF   3D
0242:  CLRF   3E
0243:  CLRF   3F
0244:  CLRF   40
0245:  MOVF   3C,W
0246:  IORWF  3B,W
0247:  IORWF  3A,W
0248:  IORWF  39,W
0249:  BTFSC  03.2
024A:  GOTO   27B
024B:  MOVLW  20
024C:  MOVWF  41
024D:  BCF    03.0
024E:  RLF    35,F
024F:  RLF    36,F
0250:  RLF    37,F
0251:  RLF    38,F
0252:  RLF    3D,F
0253:  RLF    3E,F
0254:  RLF    3F,F
0255:  RLF    40,F
0256:  MOVF   3C,W
0257:  SUBWF  40,W
0258:  BTFSS  03.2
0259:  GOTO   264
025A:  MOVF   3B,W
025B:  SUBWF  3F,W
025C:  BTFSS  03.2
025D:  GOTO   264
025E:  MOVF   3A,W
025F:  SUBWF  3E,W
0260:  BTFSS  03.2
0261:  GOTO   264
0262:  MOVF   39,W
0263:  SUBWF  3D,W
0264:  BTFSS  03.0
0265:  GOTO   275
0266:  MOVF   39,W
0267:  SUBWF  3D,F
0268:  MOVF   3A,W
0269:  BTFSS  03.0
026A:  INCFSZ 3A,W
026B:  SUBWF  3E,F
026C:  MOVF   3B,W
026D:  BTFSS  03.0
026E:  INCFSZ 3B,W
026F:  SUBWF  3F,F
0270:  MOVF   3C,W
0271:  BTFSS  03.0
0272:  INCFSZ 3C,W
0273:  SUBWF  40,F
0274:  BSF    03.0
0275:  RLF    77,F
0276:  RLF    78,F
0277:  RLF    79,F
0278:  RLF    7A,F
0279:  DECFSZ 41,F
027A:  GOTO   24D
027B:  MOVF   3D,W
027C:  MOVWF  00
027D:  INCF   04,F
027E:  MOVF   3E,W
027F:  MOVWF  00
0280:  INCF   04,F
0281:  MOVF   3F,W
0282:  MOVWF  00
0283:  INCF   04,F
0284:  MOVF   40,W
0285:  MOVWF  00
0286:  RETURN
0287:  MOVF   04,W
0288:  MOVWF  2D
0289:  MOVF   2C,W
028A:  MOVWF  2F
028B:  BTFSC  03.2
028C:  GOTO   2A6
028D:  MOVF   2B,W
028E:  MOVWF  38
028F:  MOVF   2A,W
0290:  MOVWF  37
0291:  MOVF   29,W
0292:  MOVWF  36
0293:  MOVF   28,W
0294:  MOVWF  35
0295:  CLRF   3C
0296:  CLRF   3B
0297:  MOVLW  20
0298:  MOVWF  3A
0299:  MOVLW  82
029A:  MOVWF  39
029B:  CALL   16C
029C:  MOVF   7A,W
029D:  MOVWF  2B
029E:  MOVF   79,W
029F:  MOVWF  2A
02A0:  MOVF   78,W
02A1:  MOVWF  29
02A2:  MOVF   77,W
02A3:  MOVWF  28
02A4:  DECFSZ 2F,F
02A5:  GOTO   28D
02A6:  MOVF   2B,W
02A7:  MOVWF  38
02A8:  MOVF   2A,W
02A9:  MOVWF  37
02AA:  MOVF   29,W
02AB:  MOVWF  36
02AC:  MOVF   28,W
02AD:  MOVWF  35
02AE:  MOVF   35,W
02AF:  SUBLW  B6
02B0:  MOVWF  35
02B1:  CLRF   7A
02B2:  MOVF   36,W
02B3:  MOVWF  39
02B4:  BSF    36.7
02B5:  BCF    03.0
02B6:  RRF    36,F
02B7:  RRF    37,F
02B8:  RRF    38,F
02B9:  RRF    7A,F
02BA:  RRF    79,F
02BB:  RRF    78,F
02BC:  RRF    77,F
02BD:  DECFSZ 35,F
02BE:  GOTO   2B5
02BF:  BTFSS  39.7
02C0:  GOTO   2CC
02C1:  COMF   77,F
02C2:  COMF   78,F
02C3:  COMF   79,F
02C4:  COMF   7A,F
02C5:  INCF   77,F
02C6:  BTFSC  03.2
02C7:  INCF   78,F
02C8:  BTFSC  03.2
02C9:  INCF   79,F
02CA:  BTFSC  03.2
02CB:  INCF   7A,F
02CC:  MOVF   7A,W
02CD:  MOVWF  2B
02CE:  MOVF   79,W
02CF:  MOVWF  2A
02D0:  MOVF   78,W
02D1:  MOVWF  29
02D2:  MOVF   77,W
02D3:  MOVWF  28
02D4:  BTFSS  2B.7
02D5:  GOTO   2E3
02D6:  DECF   2D,F
02D7:  BSF    2D.5
02D8:  COMF   28,F
02D9:  COMF   29,F
02DA:  COMF   2A,F
02DB:  COMF   2B,F
02DC:  INCF   28,F
02DD:  BTFSC  03.2
02DE:  INCF   29,F
02DF:  BTFSC  03.2
02E0:  INCF   2A,F
02E1:  BTFSC  03.2
02E2:  INCF   2B,F
02E3:  MOVLW  3B
02E4:  MOVWF  34
02E5:  MOVLW  9A
02E6:  MOVWF  33
02E7:  MOVLW  CA
02E8:  MOVWF  32
02E9:  CLRF   31
02EA:  MOVLW  0A
02EB:  MOVWF  2F
02EC:  MOVF   2C,W
02ED:  BTFSC  03.2
02EE:  INCF   2D,F
02EF:  BSF    03.1
02F0:  MOVLW  28
02F1:  MOVWF  04
02F2:  BCF    03.7
02F3:  MOVF   2B,W
02F4:  MOVWF  38
02F5:  MOVF   2A,W
02F6:  MOVWF  37
02F7:  MOVF   29,W
02F8:  MOVWF  36
02F9:  MOVF   28,W
02FA:  MOVWF  35
02FB:  MOVF   34,W
02FC:  MOVWF  3C
02FD:  MOVF   33,W
02FE:  MOVWF  3B
02FF:  MOVF   32,W
0300:  MOVWF  3A
0301:  MOVF   31,W
0302:  MOVWF  39
0303:  CALL   238
0304:  MOVF   78,W
0305:  MOVF   77,F
0306:  BTFSS  03.2
0307:  GOTO   31B
0308:  INCF   2C,W
0309:  SUBWF  2F,W
030A:  BTFSC  03.2
030B:  GOTO   31B
030C:  MOVF   2D,W
030D:  BTFSC  03.2
030E:  GOTO   31D
030F:  ANDLW  0F
0310:  SUBWF  2F,W
0311:  BTFSC  03.2
0312:  GOTO   315
0313:  BTFSC  03.0
0314:  GOTO   34D
0315:  BTFSC  2D.7
0316:  GOTO   34D
0317:  BTFSC  2D.6
0318:  GOTO   31D
0319:  MOVLW  20
031A:  GOTO   349
031B:  MOVLW  20
031C:  ANDWF  2D,F
031D:  BTFSS  2D.5
031E:  GOTO   32B
031F:  BCF    2D.5
0320:  MOVF   2C,W
0321:  BTFSS  03.2
0322:  DECF   2D,F
0323:  MOVF   77,W
0324:  MOVWF  2D
0325:  MOVLW  2D
0326:  MOVWF  35
0327:  CALL   0CB
0328:  MOVF   2D,W
0329:  MOVWF  77
032A:  CLRF   2D
032B:  MOVF   2C,W
032C:  SUBWF  2F,W
032D:  BTFSS  03.2
032E:  GOTO   339
032F:  MOVF   77,W
0330:  MOVWF  2D
0331:  MOVLW  2E
0332:  MOVWF  35
0333:  CALL   0CB
0334:  MOVF   2D,W
0335:  MOVWF  77
0336:  MOVLW  20
0337:  ANDWF  2D,F
0338:  MOVLW  00
0339:  MOVLW  30
033A:  BTFSS  2D.5
033B:  GOTO   349
033C:  BCF    2D.5
033D:  MOVF   2C,W
033E:  BTFSS  03.2
033F:  DECF   2D,F
0340:  MOVF   77,W
0341:  MOVWF  2D
0342:  MOVLW  2D
0343:  MOVWF  35
0344:  CALL   0CB
0345:  MOVF   2D,W
0346:  MOVWF  77
0347:  CLRF   2D
0348:  MOVLW  30
0349:  ADDWF  77,F
034A:  MOVF   77,W
034B:  MOVWF  35
034C:  CALL   0CB
034D:  BCF    03.1
034E:  MOVF   34,W
034F:  MOVWF  38
0350:  MOVF   33,W
0351:  MOVWF  37
0352:  MOVF   32,W
0353:  MOVWF  36
0354:  MOVF   31,W
0355:  MOVWF  35
0356:  CLRF   3C
0357:  CLRF   3B
0358:  CLRF   3A
0359:  MOVLW  0A
035A:  MOVWF  39
035B:  CALL   238
035C:  MOVF   7A,W
035D:  MOVWF  34
035E:  MOVF   79,W
035F:  MOVWF  33
0360:  MOVF   78,W
0361:  MOVWF  32
0362:  MOVF   77,W
0363:  MOVWF  31
0364:  DECFSZ 2F,F
0365:  GOTO   2EF
0366:  BCF    0A.3
0367:  BCF    0A.4
0368:  GOTO   3F9 (RETURN)
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... //#USE DELAY(CLOCK=4000000) // Reloj interno 4MHz
.................... #use delay(clock=4000000,crystal)//Crystal Externo 4MHz
*
0014:  MOVLW  36
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   028
001A:  MOVLW  01
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  4A
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  GOTO   026
0026:  DECFSZ 00,F
0027:  GOTO   01A
0028:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP
.................... #INCLUDE <LCD.C>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0041:  MOVLW  0F
0042:  BSF    03.5
0043:  ANDWF  08,W
0044:  IORLW  F0
0045:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0046:  BCF    03.5
0047:  BSF    08.2
....................    delay_cycles(1);
0048:  NOP
....................    lcd_output_enable(1);
0049:  BSF    08.0
....................    delay_cycles(1);
004A:  NOP
....................    high = lcd_read_nibble();
004B:  CALL   035
004C:  MOVF   78,W
004D:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
004E:  BCF    08.0
....................    delay_cycles(1);
004F:  NOP
....................    lcd_output_enable(1);
0050:  BSF    08.0
....................    delay_us(1);
0051:  NOP
....................    low = lcd_read_nibble();
0052:  CALL   035
0053:  MOVF   78,W
0054:  MOVWF  3C
....................       
....................    lcd_output_enable(0);
0055:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0056:  MOVLW  0F
0057:  BSF    03.5
0058:  ANDWF  08,W
0059:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005A:  BCF    03.5
005B:  SWAPF  3D,W
005C:  MOVWF  77
005D:  MOVLW  F0
005E:  ANDWF  77,F
005F:  MOVF   77,W
0060:  IORWF  3C,W
0061:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0035:  MOVF   08,W
0036:  MOVWF  77
0037:  SWAPF  08,W
0038:  ANDLW  0F
0039:  MOVWF  78
....................   #endif
003A:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0029:  SWAPF  3D,W
002A:  ANDLW  F0
002B:  MOVWF  77
002C:  MOVLW  0F
002D:  ANDWF  08,W
002E:  IORWF  77,W
002F:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0030:  NOP
....................    lcd_output_enable(1);
0031:  BSF    08.0
....................    delay_us(2);
0032:  GOTO   033
....................    lcd_output_enable(0);
0033:  BCF    08.0
0034:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
003B:  BSF    03.5
003C:  BCF    08.0
....................    lcd_rs_tris();
003D:  BCF    08.1
....................    lcd_rw_tris();
003E:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
003F:  BCF    03.5
0040:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0062:  MOVF   78,W
0063:  MOVWF  3C
0064:  BTFSC  3C.7
0065:  GOTO   041
....................    lcd_output_rs(address);
0066:  BTFSS  3A.0
0067:  BCF    08.1
0068:  BTFSC  3A.0
0069:  BSF    08.1
....................    delay_cycles(1);
006A:  NOP
....................    lcd_output_rw(0);
006B:  BCF    08.2
....................    delay_cycles(1);
006C:  NOP
....................    lcd_output_enable(0);
006D:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
006E:  SWAPF  3B,W
006F:  MOVWF  3C
0070:  MOVLW  0F
0071:  ANDWF  3C,F
0072:  MOVF   3C,W
0073:  MOVWF  3D
0074:  CALL   029
....................    lcd_send_nibble(n & 0xf);
0075:  MOVF   3B,W
0076:  ANDLW  0F
0077:  MOVWF  3C
0078:  MOVWF  3D
0079:  CALL   029
007A:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
007B:  MOVLW  28
007C:  MOVWF  29
007D:  MOVLW  0C
007E:  MOVWF  2A
007F:  MOVLW  01
0080:  MOVWF  2B
0081:  MOVLW  06
0082:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0083:  BCF    08.0
....................    lcd_output_rs(0);
0084:  BCF    08.1
....................    lcd_output_rw(0);
0085:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0086:  MOVLW  0F
0087:  BSF    03.5
0088:  ANDWF  08,W
0089:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
008A:  BCF    08.0
....................    lcd_rs_tris();
008B:  BCF    08.1
....................    lcd_rw_tris();
008C:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
008D:  MOVLW  0F
008E:  BCF    03.5
008F:  MOVWF  36
0090:  CALL   014
....................    for(i=1;i<=3;++i)
0091:  MOVLW  01
0092:  MOVWF  28
0093:  MOVF   28,W
0094:  SUBLW  03
0095:  BTFSS  03.0
0096:  GOTO   09F
....................    {
....................        lcd_send_nibble(3);
0097:  MOVLW  03
0098:  MOVWF  3D
0099:  CALL   029
....................        delay_ms(5);
009A:  MOVLW  05
009B:  MOVWF  36
009C:  CALL   014
009D:  INCF   28,F
009E:  GOTO   093
....................    }
....................    
....................    lcd_send_nibble(2);
009F:  MOVLW  02
00A0:  MOVWF  3D
00A1:  CALL   029
....................    delay_ms(5);
00A2:  MOVLW  05
00A3:  MOVWF  36
00A4:  CALL   014
....................    for(i=0;i<=3;++i)
00A5:  CLRF   28
00A6:  MOVF   28,W
00A7:  SUBLW  03
00A8:  BTFSS  03.0
00A9:  GOTO   0B6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00AA:  MOVLW  29
00AB:  ADDWF  28,W
00AC:  MOVWF  04
00AD:  BCF    03.7
00AE:  MOVF   00,W
00AF:  MOVWF  2D
00B0:  CLRF   3A
00B1:  MOVF   2D,W
00B2:  MOVWF  3B
00B3:  CALL   03B
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B4:  INCF   28,F
00B5:  GOTO   0A6
00B6:  BCF    0A.3
00B7:  BCF    0A.4
00B8:  GOTO   398 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B9:  DECFSZ 37,W
00BA:  GOTO   0BC
00BB:  GOTO   0BF
....................       address=LCD_LINE_TWO;
00BC:  MOVLW  40
00BD:  MOVWF  38
00BE:  GOTO   0C0
....................    else
....................       address=0;
00BF:  CLRF   38
....................      
....................    address+=x-1;
00C0:  MOVLW  01
00C1:  SUBWF  36,W
00C2:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address);
00C3:  MOVF   38,W
00C4:  IORLW  80
00C5:  MOVWF  39
00C6:  CLRF   3A
00C7:  MOVF   39,W
00C8:  MOVWF  3B
00C9:  CALL   03B
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00CA:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00CB:  MOVF   35,W
00CC:  XORLW  07
00CD:  BTFSC  03.2
00CE:  GOTO   0D9
00CF:  XORLW  0B
00D0:  BTFSC  03.2
00D1:  GOTO   0DE
00D2:  XORLW  06
00D3:  BTFSC  03.2
00D4:  GOTO   0E6
00D5:  XORLW  02
00D6:  BTFSC  03.2
00D7:  GOTO   0EC
00D8:  GOTO   0F1
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D9:  MOVLW  01
00DA:  MOVWF  36
00DB:  MOVWF  37
00DC:  CALL   0B9
00DD:  GOTO   0F6
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00DE:  CLRF   3A
00DF:  MOVLW  01
00E0:  MOVWF  3B
00E1:  CALL   03B
....................                      delay_ms(2);
00E2:  MOVLW  02
00E3:  MOVWF  36
00E4:  CALL   014
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00E5:  GOTO   0F6
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00E6:  MOVLW  01
00E7:  MOVWF  36
00E8:  MOVLW  02
00E9:  MOVWF  37
00EA:  CALL   0B9
00EB:  GOTO   0F6
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00EC:  CLRF   3A
00ED:  MOVLW  10
00EE:  MOVWF  3B
00EF:  CALL   03B
00F0:  GOTO   0F6
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00F1:  MOVLW  01
00F2:  MOVWF  3A
00F3:  MOVF   35,W
00F4:  MOVWF  3B
00F5:  CALL   03B
....................      #endif
....................    }
00F6:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
....................  
.................... #BYTE PORTA= 5    //Se especifica la ubicacion en memoria del puerto A
.................... #BYTE PORTD= 8    //Se especifica la ubicacion en memoria del puerto D
....................  
.................... long bits;        //Variable almacena los bits
.................... float tem;        //Almacena la temperatura
....................  
.................... void main(){
*
0369:  MOVF   03,W
036A:  ANDLW  1F
036B:  MOVWF  03
036C:  CLRF   27
036D:  CLRF   26
036E:  BSF    03.5
036F:  BSF    03.6
0370:  MOVF   09,W
0371:  ANDLW  C0
0372:  MOVWF  09
0373:  BCF    03.6
0374:  BCF    1F.4
0375:  BCF    1F.5
0376:  MOVLW  00
0377:  BSF    03.6
0378:  MOVWF  08
0379:  BCF    03.5
037A:  CLRF   07
037B:  CLRF   08
037C:  CLRF   09
037D:  BCF    03.7
....................    set_tris_a(0b00000001);          //Pongo el RA0 como entrada
037E:  MOVLW  01
037F:  BSF    03.5
0380:  BCF    03.6
0381:  MOVWF  05
....................    set_tris_d(0);                   //Pongo el PuertoD como Salida
0382:  MOVLW  00
0383:  MOVWF  08
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo
0384:  BSF    03.6
0385:  MOVF   09,W
0386:  ANDLW  C0
0387:  IORLW  1F
0388:  MOVWF  09
0389:  BCF    03.6
038A:  BCF    1F.4
038B:  BCF    1F.5
038C:  MOVLW  FF
038D:  BSF    03.6
038E:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion
038F:  BCF    03.5
0390:  BCF    03.6
0391:  BSF    1F.6
0392:  BSF    1F.7
0393:  BSF    03.5
0394:  BSF    1F.7
0395:  BCF    03.5
0396:  BSF    1F.0
....................    lcd_init();                      //Inicializo el LCD
0397:  GOTO   07B
....................    lcd_putc("\f");                  //Borro el LCD
0398:  MOVLW  04
0399:  BSF    03.6
039A:  MOVWF  0D
039B:  MOVLW  00
039C:  MOVWF  0F
039D:  BCF    03.6
039E:  CALL   0F7
....................    
....................    while(1)
....................    {
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0)
039F:  MOVLW  00
03A0:  MOVWF  78
03A1:  MOVF   1F,W
03A2:  ANDLW  C3
03A3:  IORWF  78,W
03A4:  MOVWF  1F
....................        delay_ms(1);                 //llamo retardo de 1 ms
03A5:  MOVLW  01
03A6:  MOVWF  36
03A7:  CALL   014
....................        bits=read_adc();             //Guarde el dato del LM en tempe
03A8:  BSF    1F.1
03A9:  BTFSC  1F.1
03AA:  GOTO   3A9
03AB:  MOVF   1E,W
03AC:  MOVWF  79
03AD:  BSF    03.5
03AE:  MOVF   1E,W
03AF:  MOVWF  78
03B0:  MOVF   79,W
03B1:  BCF    03.5
03B2:  MOVWF  21
03B3:  MOVF   78,W
03B4:  MOVWF  20
....................        
....................        tem=bits*0.4882;              //Conversion de bits a temperatura
03B5:  MOVF   21,W
03B6:  MOVWF  29
03B7:  MOVF   20,W
03B8:  MOVWF  28
03B9:  GOTO   14D
03BA:  MOVF   7A,W
03BB:  MOVWF  38
03BC:  MOVF   79,W
03BD:  MOVWF  37
03BE:  MOVF   78,W
03BF:  MOVWF  36
03C0:  MOVF   77,W
03C1:  MOVWF  35
03C2:  MOVLW  5A
03C3:  MOVWF  3C
03C4:  MOVLW  F5
03C5:  MOVWF  3B
03C6:  MOVLW  79
03C7:  MOVWF  3A
03C8:  MOVLW  7D
03C9:  MOVWF  39
03CA:  CALL   16C
03CB:  MOVF   7A,W
03CC:  MOVWF  25
03CD:  MOVF   79,W
03CE:  MOVWF  24
03CF:  MOVF   78,W
03D0:  MOVWF  23
03D1:  MOVF   77,W
03D2:  MOVWF  22
....................        lcd_gotoxy(1,1);             //Ubiquese en la posicion 1,1
03D3:  MOVLW  01
03D4:  MOVWF  36
03D5:  MOVWF  37
03D6:  CALL   0B9
....................        lcd_putc("LA TEMPERATURA");
03D7:  MOVLW  05
03D8:  BSF    03.6
03D9:  MOVWF  0D
03DA:  MOVLW  00
03DB:  MOVWF  0F
03DC:  BCF    03.6
03DD:  CALL   0F7
....................        lcd_gotoxy(2,2);             //Ubiquese en la posicion 2,2
03DE:  MOVLW  02
03DF:  MOVWF  36
03E0:  MOVWF  37
03E1:  CALL   0B9
....................        printf(lcd_putc,"ES C= %f    ",tem);  //Muestra el valor numerico de la conversionconversion
03E2:  MOVLW  0D
03E3:  BSF    03.6
03E4:  MOVWF  0D
03E5:  MOVLW  00
03E6:  MOVWF  0F
03E7:  BCF    03.0
03E8:  MOVLW  06
03E9:  BCF    03.6
03EA:  MOVWF  28
03EB:  CALL   1E1
03EC:  MOVLW  89
03ED:  MOVWF  04
03EE:  MOVF   25,W
03EF:  MOVWF  2B
03F0:  MOVF   24,W
03F1:  MOVWF  2A
03F2:  MOVF   23,W
03F3:  MOVWF  29
03F4:  MOVF   22,W
03F5:  MOVWF  28
03F6:  MOVLW  02
03F7:  MOVWF  2C
03F8:  GOTO   287
03F9:  MOVLW  11
03FA:  BSF    03.6
03FB:  MOVWF  0D
03FC:  MOVLW  00
03FD:  MOVWF  0F
03FE:  BCF    03.0
03FF:  MOVLW  04
0400:  BCF    03.6
0401:  MOVWF  28
0402:  CALL   1E1
....................        delay_ms(1000);  
0403:  MOVLW  04
0404:  MOVWF  28
0405:  MOVLW  FA
0406:  MOVWF  36
0407:  CALL   014
0408:  DECFSZ 28,F
0409:  GOTO   405
040A:  GOTO   39F
....................    }
.................... }
040B:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
